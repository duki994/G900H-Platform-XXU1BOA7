// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/infobar/InfoBar

#ifndef org_chromium_chrome_browser_infobar_InfoBar_JNI
#define org_chromium_chrome_browser_infobar_InfoBar_JNI

#include <jni.h>

#include "base/android/jni_generator/jni_generator_helper.h"

// Step 1: forward declarations.
namespace {
const char kInfoBarClassPath[] = "org/chromium/chrome/browser/infobar/InfoBar";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_InfoBar_clazz = NULL;

}  // namespace

// Step 2: method stubs.
static void OnLinkClicked(JNIEnv* env, jobject jcaller,
    jlong nativeInfoBarAndroid) {
  InfoBarAndroid* native =
      reinterpret_cast<InfoBarAndroid*>(nativeInfoBarAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnLinkClicked");
  return native->OnLinkClicked(env, jcaller);
}

static void OnButtonClicked(JNIEnv* env, jobject jcaller,
    jlong nativeInfoBarAndroid,
    jint action,
    jstring actionValue) {
  InfoBarAndroid* native =
      reinterpret_cast<InfoBarAndroid*>(nativeInfoBarAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnButtonClicked");
  return native->OnButtonClicked(env, jcaller, action, actionValue);
}

static void OnCloseButtonClicked(JNIEnv* env, jobject jcaller,
    jlong nativeInfoBarAndroid) {
  InfoBarAndroid* native =
      reinterpret_cast<InfoBarAndroid*>(nativeInfoBarAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnCloseButtonClicked");
  return native->OnCloseButtonClicked(env, jcaller);
}

static base::subtle::AtomicWord g_InfoBar_closeInfoBar = 0;
static jboolean Java_InfoBar_closeInfoBar(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_InfoBar_clazz, false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_InfoBar_clazz,
      "closeInfoBar",

"("
")"
"Z",
      &g_InfoBar_closeInfoBar);

  jboolean ret =
      env->CallBooleanMethod(obj,
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsInfoBar[] = {
    { "nativeOnLinkClicked",
"("
"J"
")"
"V", reinterpret_cast<void*>(OnLinkClicked) },
    { "nativeOnButtonClicked",
"("
"J"
"I"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(OnButtonClicked) },
    { "nativeOnCloseButtonClicked",
"("
"J"
")"
"V", reinterpret_cast<void*>(OnCloseButtonClicked) },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  g_InfoBar_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kInfoBarClassPath).obj()));

  const int kMethodsInfoBarSize = arraysize(kMethodsInfoBar);

  if (env->RegisterNatives(g_InfoBar_clazz,
                           kMethodsInfoBar,
                           kMethodsInfoBarSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, g_InfoBar_clazz, __FILE__);
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_infobar_InfoBar_JNI
