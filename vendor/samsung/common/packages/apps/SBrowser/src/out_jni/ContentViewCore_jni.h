// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/ContentViewCore

#ifndef org_chromium_content_browser_ContentViewCore_JNI
#define org_chromium_content_browser_ContentViewCore_JNI

#include <jni.h>

#include "base/android/jni_generator/jni_generator_helper.h"

// Step 1: forward declarations.
namespace {
const char kContentViewCoreClassPath[] =
    "org/chromium/content/browser/ContentViewCore";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_ContentViewCore_clazz = NULL;

}  // namespace

namespace content {

static jlong Init(JNIEnv* env, jobject jcaller,
    jlong webContentsPtr,
    jlong viewAndroidPtr,
    jlong windowAndroidPtr);

// Step 2: method stubs.
static jobject GetWebContentsAndroid(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetWebContentsAndroid", NULL);
  return native->GetWebContentsAndroid(env, jcaller).Release();
}

static void OnJavaContentViewCoreDestroyed(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnJavaContentViewCoreDestroyed");
  return native->OnJavaContentViewCoreDestroyed(env, jcaller);
}

static void LoadUrl(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jstring url,
    jint loadUrlType,
    jint transitionType,
    jint uaOverrideOption,
    jstring extraHeaders,
    jbyteArray postData,
    jstring baseUrlForDataUrl,
    jstring virtualUrlForDataUrl,
    jboolean canLoadLocalResources) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "LoadUrl");
  return native->LoadUrl(env, jcaller, url, loadUrlType, transitionType,
      uaOverrideOption, extraHeaders, postData, baseUrlForDataUrl,
      virtualUrlForDataUrl, canLoadLocalResources);
}

static jstring GetURL(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetURL", NULL);
  return native->GetURL(env, jcaller).Release();
}

static jstring GetTitle(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetTitle", NULL);
  return native->GetTitle(env, jcaller).Release();
}

static void ShowInterstitialPage(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jstring url,
    jlong nativeInterstitialPageDelegateAndroid) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "ShowInterstitialPage");
  return native->ShowInterstitialPage(env, jcaller, url,
      nativeInterstitialPageDelegateAndroid);
}

static jboolean IsShowingInterstitialPage(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsShowingInterstitialPage", false);
  return native->IsShowingInterstitialPage(env, jcaller);
}

static jboolean IsIncognito(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsIncognito", false);
  return native->IsIncognito(env, jcaller);
}

static void SetFocus(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jboolean focused) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetFocus");
  return native->SetFocus(env, jcaller, focused);
}

static void SendOrientationChangeEvent(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jint orientation) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SendOrientationChangeEvent");
  return native->SendOrientationChangeEvent(env, jcaller, orientation);
}

static void OnTouchEventHandlingBegin(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jobject event) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnTouchEventHandlingBegin");
  return native->OnTouchEventHandlingBegin(env, jcaller, event);
}

static void OnTouchEventHandlingEnd(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnTouchEventHandlingEnd");
  return native->OnTouchEventHandlingEnd(env, jcaller);
}

static jint SendMouseMoveEvent(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong timeMs,
    jfloat x,
    jfloat y) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SendMouseMoveEvent", 0);
  return native->SendMouseMoveEvent(env, jcaller, timeMs, x, y);
}

static jint SendMouseWheelEvent(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong timeMs,
    jfloat x,
    jfloat y,
    jfloat verticalAxis) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SendMouseWheelEvent", 0);
  return native->SendMouseWheelEvent(env, jcaller, timeMs, x, y, verticalAxis);
}

static void ScrollBegin(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong timeMs,
    jfloat x,
    jfloat y,
    jfloat hintX,
    jfloat hintY) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "ScrollBegin");
  return native->ScrollBegin(env, jcaller, timeMs, x, y, hintX, hintY);
}

static void ScrollEnd(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong timeMs) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "ScrollEnd");
  return native->ScrollEnd(env, jcaller, timeMs);
}

static void ScrollBy(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong timeMs,
    jfloat x,
    jfloat y,
    jfloat deltaX,
    jfloat deltaY) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "ScrollBy");
  return native->ScrollBy(env, jcaller, timeMs, x, y, deltaX, deltaY);
}

static void FlingStart(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong timeMs,
    jfloat x,
    jfloat y,
    jfloat vx,
    jfloat vy) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "FlingStart");
  return native->FlingStart(env, jcaller, timeMs, x, y, vx, vy);
}

static void FlingCancel(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong timeMs) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "FlingCancel");
  return native->FlingCancel(env, jcaller, timeMs);
}

static void SingleTap(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong timeMs,
    jfloat x,
    jfloat y,
    jboolean linkPreviewTap) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SingleTap");
  return native->SingleTap(env, jcaller, timeMs, x, y, linkPreviewTap);
}

static void SingleTapUnconfirmed(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong timeMs,
    jfloat x,
    jfloat y) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SingleTapUnconfirmed");
  return native->SingleTapUnconfirmed(env, jcaller, timeMs, x, y);
}

static void ShowPress(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong timeMs,
    jfloat x,
    jfloat y) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "ShowPress");
  return native->ShowPress(env, jcaller, timeMs, x, y);
}

static void TapCancel(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong timeMs,
    jfloat x,
    jfloat y) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "TapCancel");
  return native->TapCancel(env, jcaller, timeMs, x, y);
}

static void TapDown(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong timeMs,
    jfloat x,
    jfloat y) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "TapDown");
  return native->TapDown(env, jcaller, timeMs, x, y);
}

static void DoubleTap(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong timeMs,
    jfloat x,
    jfloat y) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "DoubleTap");
  return native->DoubleTap(env, jcaller, timeMs, x, y);
}

static void LongPress(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong timeMs,
    jfloat x,
    jfloat y,
    jboolean linkPreviewTap) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "LongPress");
  return native->LongPress(env, jcaller, timeMs, x, y, linkPreviewTap);
}

static void LongTap(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong timeMs,
    jfloat x,
    jfloat y,
    jboolean linkPreviewTap) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "LongTap");
  return native->LongTap(env, jcaller, timeMs, x, y, linkPreviewTap);
}

static void PinchBegin(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong timeMs,
    jfloat x,
    jfloat y) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "PinchBegin");
  return native->PinchBegin(env, jcaller, timeMs, x, y);
}

static void PinchEnd(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong timeMs) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "PinchEnd");
  return native->PinchEnd(env, jcaller, timeMs);
}

static void PinchBy(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong timeMs,
    jfloat anchorX,
    jfloat anchorY,
    jfloat deltaScale) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "PinchBy");
  return native->PinchBy(env, jcaller, timeMs, anchorX, anchorY, deltaScale);
}

static void SelectBetweenCoordinates(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jfloat x1,
    jfloat y1,
    jfloat x2,
    jfloat y2) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SelectBetweenCoordinates");
  return native->SelectBetweenCoordinates(env, jcaller, x1, y1, x2, y2);
}

static void MoveCaret(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jfloat x,
    jfloat y) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "MoveCaret");
  return native->MoveCaret(env, jcaller, x, y);
}

static void LoadIfNecessary(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "LoadIfNecessary");
  return native->LoadIfNecessary(env, jcaller);
}

static void RequestRestoreLoad(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "RequestRestoreLoad");
  return native->RequestRestoreLoad(env, jcaller);
}

static void StopLoading(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "StopLoading");
  return native->StopLoading(env, jcaller);
}

static void Reload(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jboolean checkForRepost) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "Reload");
  return native->Reload(env, jcaller, checkForRepost);
}

static void ReloadIgnoringCache(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jboolean checkForRepost) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "ReloadIgnoringCache");
  return native->ReloadIgnoringCache(env, jcaller, checkForRepost);
}

static void CancelPendingReload(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "CancelPendingReload");
  return native->CancelPendingReload(env, jcaller);
}

static void ContinuePendingReload(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "ContinuePendingReload");
  return native->ContinuePendingReload(env, jcaller);
}

static void SelectPopupMenuItems(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jintArray indices) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SelectPopupMenuItems");
  return native->SelectPopupMenuItems(env, jcaller, indices);
}

static void ScrollFocusedEditableNodeIntoView(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "ScrollFocusedEditableNodeIntoView");
  return native->ScrollFocusedEditableNodeIntoView(env, jcaller);
}

static void UndoScrollFocusedEditableNodeIntoView(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native,
      "UndoScrollFocusedEditableNodeIntoView");
  return native->UndoScrollFocusedEditableNodeIntoView(env, jcaller);
}

static void ClearHistory(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "ClearHistory");
  return native->ClearHistory(env, jcaller);
}

static void EvaluateJavaScript(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jstring script,
    jobject callback,
    jboolean startRenderer) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "EvaluateJavaScript");
  return native->EvaluateJavaScript(env, jcaller, script, callback,
      startRenderer);
}

static jint GetNativeImeAdapter(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetNativeImeAdapter", 0);
  return native->GetNativeImeAdapter(env, jcaller);
}

static jint GetCurrentRenderProcessId(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetCurrentRenderProcessId", 0);
  return native->GetCurrentRenderProcessId(env, jcaller);
}

static jint GetBackgroundColor(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetBackgroundColor", 0);
  return native->GetBackgroundColor(env, jcaller);
}

static void OnShow(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnShow");
  return native->OnShow(env, jcaller);
}

static void OnHide(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnHide");
  return native->OnHide(env, jcaller);
}

static void SetUseDesktopUserAgent(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jboolean enabled,
    jboolean reloadOnChange) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetUseDesktopUserAgent");
  return native->SetUseDesktopUserAgent(env, jcaller, enabled, reloadOnChange);
}

static jboolean GetUseDesktopUserAgent(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetUseDesktopUserAgent", false);
  return native->GetUseDesktopUserAgent(env, jcaller);
}

static void ClearSslPreferences(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "ClearSslPreferences");
  return native->ClearSslPreferences(env, jcaller);
}

static void AddJavascriptInterface(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jobject object,
    jstring name,
    jclass requiredAnnotation,
    jobject retainedObjectSet) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "AddJavascriptInterface");
  return native->AddJavascriptInterface(env, jcaller, object, name,
      requiredAnnotation, retainedObjectSet);
}

static void RemoveJavascriptInterface(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jstring name) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "RemoveJavascriptInterface");
  return native->RemoveJavascriptInterface(env, jcaller, name);
}

static jint GetNavigationHistory(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jobject context) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetNavigationHistory", 0);
  return native->GetNavigationHistory(env, jcaller, context);
}

static void GetDirectedNavigationHistory(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jobject context,
    jboolean isForward,
    jint maxEntries) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetDirectedNavigationHistory");
  return native->GetDirectedNavigationHistory(env, jcaller, context, isForward,
      maxEntries);
}

static jstring GetOriginalUrlForActiveNavigationEntry(JNIEnv* env, jobject
    jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native,
      "GetOriginalUrlForActiveNavigationEntry", NULL);
  return native->GetOriginalUrlForActiveNavigationEntry(env, jcaller).Release();
}

static void UpdateVSyncParameters(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong timebaseMicros,
    jlong intervalMicros) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateVSyncParameters");
  return native->UpdateVSyncParameters(env, jcaller, timebaseMicros,
      intervalMicros);
}

static void OnVSync(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong frameTimeMicros) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnVSync");
  return native->OnVSync(env, jcaller, frameTimeMicros);
}

static jboolean OnAnimate(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jlong frameTimeMicros) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnAnimate", false);
  return native->OnAnimate(env, jcaller, frameTimeMicros);
}

static void WasResized(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "WasResized");
  return native->WasResized(env, jcaller);
}

static jboolean IsRenderWidgetHostViewReady(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsRenderWidgetHostViewReady", false);
  return native->IsRenderWidgetHostViewReady(env, jcaller);
}

static void ExitFullscreen(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "ExitFullscreen");
  return native->ExitFullscreen(env, jcaller);
}

static void UpdateTopControlsState(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jboolean enableHiding,
    jboolean enableShowing,
    jboolean animate) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateTopControlsState");
  return native->UpdateTopControlsState(env, jcaller, enableHiding,
      enableShowing, animate);
}

static void ShowImeIfNeeded(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "ShowImeIfNeeded");
  return native->ShowImeIfNeeded(env, jcaller);
}

static void AttachExternalVideoSurface(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jint playerId,
    jobject surface) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "AttachExternalVideoSurface");
  return native->AttachExternalVideoSurface(env, jcaller, playerId, surface);
}

static void DetachExternalVideoSurface(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jint playerId) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "DetachExternalVideoSurface");
  return native->DetachExternalVideoSurface(env, jcaller, playerId);
}

static void SetAccessibilityEnabled(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jboolean enabled) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetAccessibilityEnabled");
  return native->SetAccessibilityEnabled(env, jcaller, enabled);
}

static void SendSingleTapUma(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jint type,
    jint count) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SendSingleTapUma");
  return native->SendSingleTapUma(env, jcaller, type, count);
}

static void SendActionAfterDoubleTapUma(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jint type,
    jboolean hasDelay,
    jint count) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SendActionAfterDoubleTapUma");
  return native->SendActionAfterDoubleTapUma(env, jcaller, type, hasDelay,
      count);
}

static void ExtractSmartClipData(JNIEnv* env, jobject jcaller,
    jlong nativeContentViewCoreImpl,
    jint x,
    jint y,
    jint w,
    jint h) {
  ContentViewCoreImpl* native =
      reinterpret_cast<ContentViewCoreImpl*>(nativeContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "ExtractSmartClipData");
  return native->ExtractSmartClipData(env, jcaller, x, y, w, h);
}

static base::subtle::AtomicWord g_ContentViewCore_addVSyncSubscriber = 0;
static void Java_ContentViewCore_addVSyncSubscriber(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "addVSyncSubscriber",

"("
")"
"V",
      &g_ContentViewCore_addVSyncSubscriber);

     env->CallVoidMethod(obj,
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_removeVSyncSubscriber = 0;
static void Java_ContentViewCore_removeVSyncSubscriber(JNIEnv* env, jobject obj)
    {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "removeVSyncSubscriber",

"("
")"
"V",
      &g_ContentViewCore_removeVSyncSubscriber);

     env->CallVoidMethod(obj,
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_resetVSyncNotification = 0;
static void Java_ContentViewCore_resetVSyncNotification(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "resetVSyncNotification",

"("
")"
"V",
      &g_ContentViewCore_resetVSyncNotification);

     env->CallVoidMethod(obj,
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_setNeedsAnimate = 0;
static void Java_ContentViewCore_setNeedsAnimate(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "setNeedsAnimate",

"("
")"
"V",
      &g_ContentViewCore_setNeedsAnimate);

     env->CallVoidMethod(obj,
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_getContext = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_ContentViewCore_getContext(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz, NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "getContext",

"("
")"
"Landroid/content/Context;",
      &g_ContentViewCore_getContext);

  jobject ret =
      env->CallObjectMethod(obj,
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_ContentViewCore_onNativeContentViewCoreDestroyed = 0;
static void Java_ContentViewCore_onNativeContentViewCoreDestroyed(JNIEnv* env,
    jobject obj, jlong nativeContentViewCore) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "onNativeContentViewCoreDestroyed",

"("
"J"
")"
"V",
      &g_ContentViewCore_onNativeContentViewCoreDestroyed);

     env->CallVoidMethod(obj,
          method_id, nativeContentViewCore);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_getNativeContentViewCore = 0;
static jlong Java_ContentViewCore_getNativeContentViewCore(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz, 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "getNativeContentViewCore",

"("
")"
"J",
      &g_ContentViewCore_getNativeContentViewCore);

  jlong ret =
      env->CallLongMethod(obj,
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ContentViewCore_onBackgroundColorChanged = 0;
static void Java_ContentViewCore_onBackgroundColorChanged(JNIEnv* env, jobject
    obj, jint color) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "onBackgroundColorChanged",

"("
"I"
")"
"V",
      &g_ContentViewCore_onBackgroundColorChanged);

     env->CallVoidMethod(obj,
          method_id, color);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_getViewportWidthPix = 0;
static jint Java_ContentViewCore_getViewportWidthPix(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz, 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "getViewportWidthPix",

"("
")"
"I",
      &g_ContentViewCore_getViewportWidthPix);

  jint ret =
      env->CallIntMethod(obj,
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ContentViewCore_getViewportHeightPix = 0;
static jint Java_ContentViewCore_getViewportHeightPix(JNIEnv* env, jobject obj)
    {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz, 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "getViewportHeightPix",

"("
")"
"I",
      &g_ContentViewCore_getViewportHeightPix);

  jint ret =
      env->CallIntMethod(obj,
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ContentViewCore_getPhysicalBackingWidthPix =
    0;
static jint Java_ContentViewCore_getPhysicalBackingWidthPix(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz, 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "getPhysicalBackingWidthPix",

"("
")"
"I",
      &g_ContentViewCore_getPhysicalBackingWidthPix);

  jint ret =
      env->CallIntMethod(obj,
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ContentViewCore_getPhysicalBackingHeightPix =
    0;
static jint Java_ContentViewCore_getPhysicalBackingHeightPix(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz, 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "getPhysicalBackingHeightPix",

"("
")"
"I",
      &g_ContentViewCore_getPhysicalBackingHeightPix);

  jint ret =
      env->CallIntMethod(obj,
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ContentViewCore_getOverdrawBottomHeightPix =
    0;
static jint Java_ContentViewCore_getOverdrawBottomHeightPix(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz, 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "getOverdrawBottomHeightPix",

"("
")"
"I",
      &g_ContentViewCore_getOverdrawBottomHeightPix);

  jint ret =
      env->CallIntMethod(obj,
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ContentViewCore_getViewportSizeOffsetWidthPix
    = 0;
static jint Java_ContentViewCore_getViewportSizeOffsetWidthPix(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz, 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "getViewportSizeOffsetWidthPix",

"("
")"
"I",
      &g_ContentViewCore_getViewportSizeOffsetWidthPix);

  jint ret =
      env->CallIntMethod(obj,
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ContentViewCore_getViewportSizeOffsetHeightPix
    = 0;
static jint Java_ContentViewCore_getViewportSizeOffsetHeightPix(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz, 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "getViewportSizeOffsetHeightPix",

"("
")"
"I",
      &g_ContentViewCore_getViewportSizeOffsetHeightPix);

  jint ret =
      env->CallIntMethod(obj,
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ContentViewCore_onFlingStartEventConsumed = 0;
static void Java_ContentViewCore_onFlingStartEventConsumed(JNIEnv* env, jobject
    obj, jint vx,
    jint vy) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "onFlingStartEventConsumed",

"("
"I"
"I"
")"
"V",
      &g_ContentViewCore_onFlingStartEventConsumed);

     env->CallVoidMethod(obj,
          method_id, vx, vy);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_onFlingStartEventHadNoConsumer
    = 0;
static void Java_ContentViewCore_onFlingStartEventHadNoConsumer(JNIEnv* env,
    jobject obj, jint vx,
    jint vy) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "onFlingStartEventHadNoConsumer",

"("
"I"
"I"
")"
"V",
      &g_ContentViewCore_onFlingStartEventHadNoConsumer);

     env->CallVoidMethod(obj,
          method_id, vx, vy);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_onFlingCancelEventAck = 0;
static void Java_ContentViewCore_onFlingCancelEventAck(JNIEnv* env, jobject obj)
    {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "onFlingCancelEventAck",

"("
")"
"V",
      &g_ContentViewCore_onFlingCancelEventAck);

     env->CallVoidMethod(obj,
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_onScrollBeginEventAck = 0;
static void Java_ContentViewCore_onScrollBeginEventAck(JNIEnv* env, jobject obj)
    {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "onScrollBeginEventAck",

"("
")"
"V",
      &g_ContentViewCore_onScrollBeginEventAck);

     env->CallVoidMethod(obj,
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_onScrollUpdateGestureConsumed
    = 0;
static void Java_ContentViewCore_onScrollUpdateGestureConsumed(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "onScrollUpdateGestureConsumed",

"("
")"
"V",
      &g_ContentViewCore_onScrollUpdateGestureConsumed);

     env->CallVoidMethod(obj,
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_onScrollEndEventAck = 0;
static void Java_ContentViewCore_onScrollEndEventAck(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "onScrollEndEventAck",

"("
")"
"V",
      &g_ContentViewCore_onScrollEndEventAck);

     env->CallVoidMethod(obj,
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_onPinchBeginEventAck = 0;
static void Java_ContentViewCore_onPinchBeginEventAck(JNIEnv* env, jobject obj)
    {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "onPinchBeginEventAck",

"("
")"
"V",
      &g_ContentViewCore_onPinchBeginEventAck);

     env->CallVoidMethod(obj,
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_onPinchEndEventAck = 0;
static void Java_ContentViewCore_onPinchEndEventAck(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "onPinchEndEventAck",

"("
")"
"V",
      &g_ContentViewCore_onPinchEndEventAck);

     env->CallVoidMethod(obj,
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_onDoubleTapEventAck = 0;
static void Java_ContentViewCore_onDoubleTapEventAck(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "onDoubleTapEventAck",

"("
")"
"V",
      &g_ContentViewCore_onDoubleTapEventAck);

     env->CallVoidMethod(obj,
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_filterTapOrPressEvent = 0;
static jboolean Java_ContentViewCore_filterTapOrPressEvent(JNIEnv* env, jobject
    obj, jint type,
    jint x,
    jint y) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz, false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "filterTapOrPressEvent",

"("
"I"
"I"
"I"
")"
"Z",
      &g_ContentViewCore_filterTapOrPressEvent);

  jboolean ret =
      env->CallBooleanMethod(obj,
          method_id, type, x, y);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ContentViewCore_updateFrameInfo = 0;
static void Java_ContentViewCore_updateFrameInfo(JNIEnv* env, jobject obj,
    jfloat scrollOffsetX,
    jfloat scrollOffsetY,
    jfloat pageScaleFactor,
    jfloat minPageScaleFactor,
    jfloat maxPageScaleFactor,
    jfloat contentWidth,
    jfloat contentHeight,
    jfloat viewportWidth,
    jfloat viewportHeight,
    jfloat controlsOffsetYCss,
    jfloat contentOffsetYCss,
    jfloat overdrawBottomHeightCss) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "updateFrameInfo",

"("
"F"
"F"
"F"
"F"
"F"
"F"
"F"
"F"
"F"
"F"
"F"
"F"
")"
"V",
      &g_ContentViewCore_updateFrameInfo);

     env->CallVoidMethod(obj,
          method_id, scrollOffsetX, scrollOffsetY, pageScaleFactor,
              minPageScaleFactor, maxPageScaleFactor, contentWidth,
              contentHeight, viewportWidth, viewportHeight, controlsOffsetYCss,
              contentOffsetYCss, overdrawBottomHeightCss);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_updateImeAdapter = 0;
static void Java_ContentViewCore_updateImeAdapter(JNIEnv* env, jobject obj, jint
    nativeImeAdapterAndroid,
    jint textInputType,
    jstring text,
    jint selectionStart,
    jint selectionEnd,
    jint compositionStart,
    jint compositionEnd,
    jboolean showImeIfNeeded,
    jboolean requireAck) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "updateImeAdapter",

"("
"I"
"I"
"Ljava/lang/String;"
"I"
"I"
"I"
"I"
"Z"
"Z"
")"
"V",
      &g_ContentViewCore_updateImeAdapter);

     env->CallVoidMethod(obj,
          method_id, nativeImeAdapterAndroid, textInputType, text,
              selectionStart, selectionEnd, compositionStart, compositionEnd,
              showImeIfNeeded, requireAck);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_setTitle = 0;
static void Java_ContentViewCore_setTitle(JNIEnv* env, jobject obj, jstring
    title) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "setTitle",

"("
"Ljava/lang/String;"
")"
"V",
      &g_ContentViewCore_setTitle);

     env->CallVoidMethod(obj,
          method_id, title);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_showSelectPopup = 0;
static void Java_ContentViewCore_showSelectPopup(JNIEnv* env, jobject obj,
    jobjectArray items,
    jintArray enabled,
    jboolean multiple,
    jintArray selectedIndices) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "showSelectPopup",

"("
"[Ljava/lang/String;"
"[I"
"Z"
"[I"
")"
"V",
      &g_ContentViewCore_showSelectPopup);

     env->CallVoidMethod(obj,
          method_id, items, enabled, multiple, selectedIndices);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_showDisambiguationPopup = 0;
static void Java_ContentViewCore_showDisambiguationPopup(JNIEnv* env, jobject
    obj, jobject targetRect,
    jobject zoomedBitmap) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "showDisambiguationPopup",

"("
"Landroid/graphics/Rect;"
"Landroid/graphics/Bitmap;"
")"
"V",
      &g_ContentViewCore_showDisambiguationPopup);

     env->CallVoidMethod(obj,
          method_id, targetRect, zoomedBitmap);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_createTouchEventSynthesizer =
    0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_ContentViewCore_createTouchEventSynthesizer(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz, NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "createTouchEventSynthesizer",

"("
")"
"Lorg/chromium/content/browser/TouchEventSynthesizer;",
      &g_ContentViewCore_createTouchEventSynthesizer);

  jobject ret =
      env->CallObjectMethod(obj,
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_ContentViewCore_onSelectionChanged = 0;
static void Java_ContentViewCore_onSelectionChanged(JNIEnv* env, jobject obj,
    jstring text) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "onSelectionChanged",

"("
"Ljava/lang/String;"
")"
"V",
      &g_ContentViewCore_onSelectionChanged);

     env->CallVoidMethod(obj,
          method_id, text);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_onSelectionBoundsChanged = 0;
static void Java_ContentViewCore_onSelectionBoundsChanged(JNIEnv* env, jobject
    obj, jobject anchorRectDip,
    jint anchorDir,
    jobject focusRectDip,
    jint focusDir,
    jboolean isAnchorFirst) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "onSelectionBoundsChanged",

"("
"Landroid/graphics/Rect;"
"I"
"Landroid/graphics/Rect;"
"I"
"Z"
")"
"V",
      &g_ContentViewCore_onSelectionBoundsChanged);

     env->CallVoidMethod(obj,
          method_id, anchorRectDip, anchorDir, focusRectDip, focusDir,
              isAnchorFirst);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_onEvaluateJavaScriptResult =
    0;
static void Java_ContentViewCore_onEvaluateJavaScriptResult(JNIEnv* env, jstring
    jsonResult,
    jobject callback) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, g_ContentViewCore_clazz,
      g_ContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ContentViewCore_clazz,
      "onEvaluateJavaScriptResult",

"("
"Ljava/lang/String;"
"Lorg/chromium/content/browser/ContentViewCore$JavaScriptCallback;"
")"
"V",
      &g_ContentViewCore_onEvaluateJavaScriptResult);

     env->CallStaticVoidMethod(g_ContentViewCore_clazz,
          method_id, jsonResult, callback);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_showPastePopup = 0;
static void Java_ContentViewCore_showPastePopup(JNIEnv* env, jobject obj, jint
    xDip,
    jint yDip) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "showPastePopup",

"("
"I"
"I"
")"
"V",
      &g_ContentViewCore_showPastePopup);

     env->CallVoidMethod(obj,
          method_id, xDip, yDip);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_onRenderProcessSwap = 0;
static void Java_ContentViewCore_onRenderProcessSwap(JNIEnv* env, jobject obj,
    jint oldPid,
    jint newPid) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "onRenderProcessSwap",

"("
"I"
"I"
")"
"V",
      &g_ContentViewCore_onRenderProcessSwap);

     env->CallVoidMethod(obj,
          method_id, oldPid, newPid);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_onWebContentsConnected = 0;
static void Java_ContentViewCore_onWebContentsConnected(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "onWebContentsConnected",

"("
")"
"V",
      &g_ContentViewCore_onWebContentsConnected);

     env->CallVoidMethod(obj,
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_hasFocus = 0;
static jboolean Java_ContentViewCore_hasFocus(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz, false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "hasFocus",

"("
")"
"Z",
      &g_ContentViewCore_hasFocus);

  jboolean ret =
      env->CallBooleanMethod(obj,
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ContentViewCore_startContentIntent = 0;
static void Java_ContentViewCore_startContentIntent(JNIEnv* env, jobject obj,
    jstring contentUrl) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "startContentIntent",

"("
"Ljava/lang/String;"
")"
"V",
      &g_ContentViewCore_startContentIntent);

     env->CallVoidMethod(obj,
          method_id, contentUrl);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_addToNavigationHistory = 0;
static void Java_ContentViewCore_addToNavigationHistory(JNIEnv* env, jobject
    obj, jobject history,
    jint index,
    jstring url,
    jstring virtualUrl,
    jstring originalUrl,
    jstring title) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "addToNavigationHistory",

"("
"Ljava/lang/Object;"
"I"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
      &g_ContentViewCore_addToNavigationHistory);

     env->CallVoidMethod(obj,
          method_id, history, index, url, virtualUrl, originalUrl, title);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_getLocationInWindowX = 0;
static jint Java_ContentViewCore_getLocationInWindowX(JNIEnv* env, jobject obj)
    {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz, 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "getLocationInWindowX",

"("
")"
"I",
      &g_ContentViewCore_getLocationInWindowX);

  jint ret =
      env->CallIntMethod(obj,
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ContentViewCore_getLocationInWindowY = 0;
static jint Java_ContentViewCore_getLocationInWindowY(JNIEnv* env, jobject obj)
    {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz, 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "getLocationInWindowY",

"("
")"
"I",
      &g_ContentViewCore_getLocationInWindowY);

  jint ret =
      env->CallIntMethod(obj,
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ContentViewCore_createRect = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_ContentViewCore_createRect(JNIEnv* env, jint x,
    jint y,
    jint right,
    jint bottom) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, g_ContentViewCore_clazz,
      g_ContentViewCore_clazz, NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ContentViewCore_clazz,
      "createRect",

"("
"I"
"I"
"I"
"I"
")"
"Landroid/graphics/Rect;",
      &g_ContentViewCore_createRect);

  jobject ret =
      env->CallStaticObjectMethod(g_ContentViewCore_clazz,
          method_id, x, y, right, bottom);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_ContentViewCore_notifyExternalSurface = 0;
static void Java_ContentViewCore_notifyExternalSurface(JNIEnv* env, jobject obj,
    jint playerId,
    jboolean isRequest,
    jfloat x,
    jfloat y,
    jfloat width,
    jfloat height) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "notifyExternalSurface",

"("
"I"
"Z"
"F"
"F"
"F"
"F"
")"
"V",
      &g_ContentViewCore_notifyExternalSurface);

     env->CallVoidMethod(obj,
          method_id, playerId, isRequest, x, y, width, height);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_onSmartClipDataExtracted = 0;
static void Java_ContentViewCore_onSmartClipDataExtracted(JNIEnv* env, jobject
    obj, jstring result,
    jstring innerHtml) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "onSmartClipDataExtracted",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
      &g_ContentViewCore_onSmartClipDataExtracted);

     env->CallVoidMethod(obj,
          method_id, result, innerHtml);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentViewCore_getContentVideoViewClient = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_ContentViewCore_getContentVideoViewClient(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz, NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "getContentVideoViewClient",

"("
")"
"Lorg/chromium/content/browser/ContentVideoViewClient;",
      &g_ContentViewCore_getContentVideoViewClient);

  jobject ret =
      env->CallObjectMethod(obj,
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_ContentViewCore_shouldBlockMediaRequest = 0;
static jboolean Java_ContentViewCore_shouldBlockMediaRequest(JNIEnv* env,
    jobject obj, jstring url) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz, false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "shouldBlockMediaRequest",

"("
"Ljava/lang/String;"
")"
"Z",
      &g_ContentViewCore_shouldBlockMediaRequest);

  jboolean ret =
      env->CallBooleanMethod(obj,
          method_id, url);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ContentViewCore_onNativeFlingStopped = 0;
static void Java_ContentViewCore_onNativeFlingStopped(JNIEnv* env, jobject obj)
    {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentViewCore_clazz,
      "onNativeFlingStopped",

"("
")"
"V",
      &g_ContentViewCore_onNativeFlingStopped);

     env->CallVoidMethod(obj,
          method_id);
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsContentViewCore[] = {
    { "nativeInit",
"("
"J"
"J"
"J"
")"
"J", reinterpret_cast<void*>(Init) },
    { "nativeGetWebContentsAndroid",
"("
"J"
")"
"Lorg/chromium/content_public/browser/WebContents;",
    reinterpret_cast<void*>(GetWebContentsAndroid) },
    { "nativeOnJavaContentViewCoreDestroyed",
"("
"J"
")"
"V", reinterpret_cast<void*>(OnJavaContentViewCoreDestroyed) },
    { "nativeLoadUrl",
"("
"J"
"Ljava/lang/String;"
"I"
"I"
"I"
"Ljava/lang/String;"
"[B"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Z"
")"
"V", reinterpret_cast<void*>(LoadUrl) },
    { "nativeGetURL",
"("
"J"
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetURL) },
    { "nativeGetTitle",
"("
"J"
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetTitle) },
    { "nativeShowInterstitialPage",
"("
"J"
"Ljava/lang/String;"
"J"
")"
"V", reinterpret_cast<void*>(ShowInterstitialPage) },
    { "nativeIsShowingInterstitialPage",
"("
"J"
")"
"Z", reinterpret_cast<void*>(IsShowingInterstitialPage) },
    { "nativeIsIncognito",
"("
"J"
")"
"Z", reinterpret_cast<void*>(IsIncognito) },
    { "nativeSetFocus",
"("
"J"
"Z"
")"
"V", reinterpret_cast<void*>(SetFocus) },
    { "nativeSendOrientationChangeEvent",
"("
"J"
"I"
")"
"V", reinterpret_cast<void*>(SendOrientationChangeEvent) },
    { "nativeOnTouchEventHandlingBegin",
"("
"J"
"Landroid/view/MotionEvent;"
")"
"V", reinterpret_cast<void*>(OnTouchEventHandlingBegin) },
    { "nativeOnTouchEventHandlingEnd",
"("
"J"
")"
"V", reinterpret_cast<void*>(OnTouchEventHandlingEnd) },
    { "nativeSendMouseMoveEvent",
"("
"J"
"J"
"F"
"F"
")"
"I", reinterpret_cast<void*>(SendMouseMoveEvent) },
    { "nativeSendMouseWheelEvent",
"("
"J"
"J"
"F"
"F"
"F"
")"
"I", reinterpret_cast<void*>(SendMouseWheelEvent) },
    { "nativeScrollBegin",
"("
"J"
"J"
"F"
"F"
"F"
"F"
")"
"V", reinterpret_cast<void*>(ScrollBegin) },
    { "nativeScrollEnd",
"("
"J"
"J"
")"
"V", reinterpret_cast<void*>(ScrollEnd) },
    { "nativeScrollBy",
"("
"J"
"J"
"F"
"F"
"F"
"F"
")"
"V", reinterpret_cast<void*>(ScrollBy) },
    { "nativeFlingStart",
"("
"J"
"J"
"F"
"F"
"F"
"F"
")"
"V", reinterpret_cast<void*>(FlingStart) },
    { "nativeFlingCancel",
"("
"J"
"J"
")"
"V", reinterpret_cast<void*>(FlingCancel) },
    { "nativeSingleTap",
"("
"J"
"J"
"F"
"F"
"Z"
")"
"V", reinterpret_cast<void*>(SingleTap) },
    { "nativeSingleTapUnconfirmed",
"("
"J"
"J"
"F"
"F"
")"
"V", reinterpret_cast<void*>(SingleTapUnconfirmed) },
    { "nativeShowPress",
"("
"J"
"J"
"F"
"F"
")"
"V", reinterpret_cast<void*>(ShowPress) },
    { "nativeTapCancel",
"("
"J"
"J"
"F"
"F"
")"
"V", reinterpret_cast<void*>(TapCancel) },
    { "nativeTapDown",
"("
"J"
"J"
"F"
"F"
")"
"V", reinterpret_cast<void*>(TapDown) },
    { "nativeDoubleTap",
"("
"J"
"J"
"F"
"F"
")"
"V", reinterpret_cast<void*>(DoubleTap) },
    { "nativeLongPress",
"("
"J"
"J"
"F"
"F"
"Z"
")"
"V", reinterpret_cast<void*>(LongPress) },
    { "nativeLongTap",
"("
"J"
"J"
"F"
"F"
"Z"
")"
"V", reinterpret_cast<void*>(LongTap) },
    { "nativePinchBegin",
"("
"J"
"J"
"F"
"F"
")"
"V", reinterpret_cast<void*>(PinchBegin) },
    { "nativePinchEnd",
"("
"J"
"J"
")"
"V", reinterpret_cast<void*>(PinchEnd) },
    { "nativePinchBy",
"("
"J"
"J"
"F"
"F"
"F"
")"
"V", reinterpret_cast<void*>(PinchBy) },
    { "nativeSelectBetweenCoordinates",
"("
"J"
"F"
"F"
"F"
"F"
")"
"V", reinterpret_cast<void*>(SelectBetweenCoordinates) },
    { "nativeMoveCaret",
"("
"J"
"F"
"F"
")"
"V", reinterpret_cast<void*>(MoveCaret) },
    { "nativeLoadIfNecessary",
"("
"J"
")"
"V", reinterpret_cast<void*>(LoadIfNecessary) },
    { "nativeRequestRestoreLoad",
"("
"J"
")"
"V", reinterpret_cast<void*>(RequestRestoreLoad) },
    { "nativeStopLoading",
"("
"J"
")"
"V", reinterpret_cast<void*>(StopLoading) },
    { "nativeReload",
"("
"J"
"Z"
")"
"V", reinterpret_cast<void*>(Reload) },
    { "nativeReloadIgnoringCache",
"("
"J"
"Z"
")"
"V", reinterpret_cast<void*>(ReloadIgnoringCache) },
    { "nativeCancelPendingReload",
"("
"J"
")"
"V", reinterpret_cast<void*>(CancelPendingReload) },
    { "nativeContinuePendingReload",
"("
"J"
")"
"V", reinterpret_cast<void*>(ContinuePendingReload) },
    { "nativeSelectPopupMenuItems",
"("
"J"
"[I"
")"
"V", reinterpret_cast<void*>(SelectPopupMenuItems) },
    { "nativeScrollFocusedEditableNodeIntoView",
"("
"J"
")"
"V", reinterpret_cast<void*>(ScrollFocusedEditableNodeIntoView) },
    { "nativeUndoScrollFocusedEditableNodeIntoView",
"("
"J"
")"
"V", reinterpret_cast<void*>(UndoScrollFocusedEditableNodeIntoView) },
    { "nativeClearHistory",
"("
"J"
")"
"V", reinterpret_cast<void*>(ClearHistory) },
    { "nativeEvaluateJavaScript",
"("
"J"
"Ljava/lang/String;"
"Lorg/chromium/content/browser/ContentViewCore$JavaScriptCallback;"
"Z"
")"
"V", reinterpret_cast<void*>(EvaluateJavaScript) },
    { "nativeGetNativeImeAdapter",
"("
"J"
")"
"I", reinterpret_cast<void*>(GetNativeImeAdapter) },
    { "nativeGetCurrentRenderProcessId",
"("
"J"
")"
"I", reinterpret_cast<void*>(GetCurrentRenderProcessId) },
    { "nativeGetBackgroundColor",
"("
"J"
")"
"I", reinterpret_cast<void*>(GetBackgroundColor) },
    { "nativeOnShow",
"("
"J"
")"
"V", reinterpret_cast<void*>(OnShow) },
    { "nativeOnHide",
"("
"J"
")"
"V", reinterpret_cast<void*>(OnHide) },
    { "nativeSetUseDesktopUserAgent",
"("
"J"
"Z"
"Z"
")"
"V", reinterpret_cast<void*>(SetUseDesktopUserAgent) },
    { "nativeGetUseDesktopUserAgent",
"("
"J"
")"
"Z", reinterpret_cast<void*>(GetUseDesktopUserAgent) },
    { "nativeClearSslPreferences",
"("
"J"
")"
"V", reinterpret_cast<void*>(ClearSslPreferences) },
    { "nativeAddJavascriptInterface",
"("
"J"
"Ljava/lang/Object;"
"Ljava/lang/String;"
"Ljava/lang/Class;"
"Ljava/util/HashSet;"
")"
"V", reinterpret_cast<void*>(AddJavascriptInterface) },
    { "nativeRemoveJavascriptInterface",
"("
"J"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(RemoveJavascriptInterface) },
    { "nativeGetNavigationHistory",
"("
"J"
"Ljava/lang/Object;"
")"
"I", reinterpret_cast<void*>(GetNavigationHistory) },
    { "nativeGetDirectedNavigationHistory",
"("
"J"
"Ljava/lang/Object;"
"Z"
"I"
")"
"V", reinterpret_cast<void*>(GetDirectedNavigationHistory) },
    { "nativeGetOriginalUrlForActiveNavigationEntry",
"("
"J"
")"
"Ljava/lang/String;",
    reinterpret_cast<void*>(GetOriginalUrlForActiveNavigationEntry) },
    { "nativeUpdateVSyncParameters",
"("
"J"
"J"
"J"
")"
"V", reinterpret_cast<void*>(UpdateVSyncParameters) },
    { "nativeOnVSync",
"("
"J"
"J"
")"
"V", reinterpret_cast<void*>(OnVSync) },
    { "nativeOnAnimate",
"("
"J"
"J"
")"
"Z", reinterpret_cast<void*>(OnAnimate) },
    { "nativeWasResized",
"("
"J"
")"
"V", reinterpret_cast<void*>(WasResized) },
    { "nativeIsRenderWidgetHostViewReady",
"("
"J"
")"
"Z", reinterpret_cast<void*>(IsRenderWidgetHostViewReady) },
    { "nativeExitFullscreen",
"("
"J"
")"
"V", reinterpret_cast<void*>(ExitFullscreen) },
    { "nativeUpdateTopControlsState",
"("
"J"
"Z"
"Z"
"Z"
")"
"V", reinterpret_cast<void*>(UpdateTopControlsState) },
    { "nativeShowImeIfNeeded",
"("
"J"
")"
"V", reinterpret_cast<void*>(ShowImeIfNeeded) },
    { "nativeAttachExternalVideoSurface",
"("
"J"
"I"
"Landroid/view/Surface;"
")"
"V", reinterpret_cast<void*>(AttachExternalVideoSurface) },
    { "nativeDetachExternalVideoSurface",
"("
"J"
"I"
")"
"V", reinterpret_cast<void*>(DetachExternalVideoSurface) },
    { "nativeSetAccessibilityEnabled",
"("
"J"
"Z"
")"
"V", reinterpret_cast<void*>(SetAccessibilityEnabled) },
    { "nativeSendSingleTapUma",
"("
"J"
"I"
"I"
")"
"V", reinterpret_cast<void*>(SendSingleTapUma) },
    { "nativeSendActionAfterDoubleTapUma",
"("
"J"
"I"
"Z"
"I"
")"
"V", reinterpret_cast<void*>(SendActionAfterDoubleTapUma) },
    { "nativeExtractSmartClipData",
"("
"J"
"I"
"I"
"I"
"I"
")"
"V", reinterpret_cast<void*>(ExtractSmartClipData) },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  g_ContentViewCore_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kContentViewCoreClassPath).obj()));

  const int kMethodsContentViewCoreSize = arraysize(kMethodsContentViewCore);

  if (env->RegisterNatives(g_ContentViewCore_clazz,
                           kMethodsContentViewCore,
                           kMethodsContentViewCoreSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, g_ContentViewCore_clazz, __FILE__);
    return false;
  }

  return true;
}

}  // namespace content

#endif  // org_chromium_content_browser_ContentViewCore_JNI
