// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/sec/chromium/content/browser/SbrContentSettings

#ifndef com_sec_chromium_content_browser_SbrContentSettings_JNI
#define com_sec_chromium_content_browser_SbrContentSettings_JNI

#include <jni.h>

#include "base/android/jni_generator/jni_generator_helper.h"

// Step 1: forward declarations.
namespace {
const char kSbrContentSettingsClassPath[] =
    "com/sec/chromium/content/browser/SbrContentSettings";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SbrContentSettings_clazz = NULL;

}  // namespace

namespace content {

static jlong Init(JNIEnv* env, jobject jcaller,
    jlong webContentsPtr);

// Step 2: method stubs.
static void SyncFromNative(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentSettings) {
  SbrContentSettings* native =
      reinterpret_cast<SbrContentSettings*>(nativeSbrContentSettings);
  CHECK_NATIVE_PTR(env, jcaller, native, "SyncFromNative");
  return native->SyncFromNative(env, jcaller);
}

static void SyncToNative(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentSettings) {
  SbrContentSettings* native =
      reinterpret_cast<SbrContentSettings*>(nativeSbrContentSettings);
  CHECK_NATIVE_PTR(env, jcaller, native, "SyncToNative");
  return native->SyncToNative(env, jcaller);
}

static base::subtle::AtomicWord
    g_SbrContentSettings_onNativeSbrContentSettingsDestroyed = 0;
static void Java_SbrContentSettings_onNativeSbrContentSettingsDestroyed(JNIEnv*
    env, jobject obj, jint nativeSbrContentSettings) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentSettings_clazz,
      "onNativeSbrContentSettingsDestroyed",

"("
"I"
")"
"V",
      &g_SbrContentSettings_onNativeSbrContentSettingsDestroyed);

     env->CallVoidMethod(obj,
          method_id, nativeSbrContentSettings);
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsSbrContentSettings[] = {
    { "nativeInit",
"("
"J"
")"
"J", reinterpret_cast<void*>(Init) },
    { "nativeSyncFromNative",
"("
"J"
")"
"V", reinterpret_cast<void*>(SyncFromNative) },
    { "nativeSyncToNative",
"("
"J"
")"
"V", reinterpret_cast<void*>(SyncToNative) },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  g_SbrContentSettings_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kSbrContentSettingsClassPath).obj()));

  const int kMethodsSbrContentSettingsSize =
      arraysize(kMethodsSbrContentSettings);

  if (env->RegisterNatives(g_SbrContentSettings_clazz,
                           kMethodsSbrContentSettings,
                           kMethodsSbrContentSettingsSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, g_SbrContentSettings_clazz, __FILE__);
    return false;
  }

  return true;
}

}  // namespace content

#endif  // com_sec_chromium_content_browser_SbrContentSettings_JNI
