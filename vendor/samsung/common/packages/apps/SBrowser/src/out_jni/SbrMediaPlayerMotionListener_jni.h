// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/sec/chromium/chrome/browser/SbrMediaPlayerMotionListener

#ifndef com_sec_chromium_chrome_browser_SbrMediaPlayerMotionListener_JNI
#define com_sec_chromium_chrome_browser_SbrMediaPlayerMotionListener_JNI

#include <jni.h>

#include "base/android/jni_generator/jni_generator_helper.h"

// Step 1: forward declarations.
namespace {
const char kSbrMediaPlayerMotionListenerClassPath[] =
    "com/sec/chromium/chrome/browser/SbrMediaPlayerMotionListener";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SbrMediaPlayerMotionListener_clazz = NULL;

}  // namespace

namespace media {

// Step 2: method stubs.
static void PauseMedia(JNIEnv* env, jobject jcaller,
    jlong nativeSbrMediaPlayerMotionListener) {
  SbrMediaPlayerMotionListener* native =
      reinterpret_cast<SbrMediaPlayerMotionListener*>(nativeSbrMediaPlayerMotionListener);
  CHECK_NATIVE_PTR(env, jcaller, native, "PauseMedia");
  return native->PauseMedia(env, jcaller);
}

static base::subtle::AtomicWord g_SbrMediaPlayerMotionListener_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_SbrMediaPlayerMotionListener_create(JNIEnv* env, jlong
    nativeSbrMediaPlayerMotionListener,
    jobject context) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, g_SbrMediaPlayerMotionListener_clazz,
      g_SbrMediaPlayerMotionListener_clazz, NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_SbrMediaPlayerMotionListener_clazz,
      "create",

"("
"J"
"Landroid/content/Context;"
")"
"Lcom/sec/chromium/chrome/browser/SbrMediaPlayerMotionListener;",
      &g_SbrMediaPlayerMotionListener_create);

  jobject ret =
      env->CallStaticObjectMethod(g_SbrMediaPlayerMotionListener_clazz,
          method_id, nativeSbrMediaPlayerMotionListener, context);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_SbrMediaPlayerMotionListener_registerReceiver
    = 0;
static void Java_SbrMediaPlayerMotionListener_registerReceiver(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrMediaPlayerMotionListener_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrMediaPlayerMotionListener_clazz,
      "registerReceiver",

"("
")"
"V",
      &g_SbrMediaPlayerMotionListener_registerReceiver);

     env->CallVoidMethod(obj,
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_SbrMediaPlayerMotionListener_unregisterReceiver = 0;
static void Java_SbrMediaPlayerMotionListener_unregisterReceiver(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrMediaPlayerMotionListener_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrMediaPlayerMotionListener_clazz,
      "unregisterReceiver",

"("
")"
"V",
      &g_SbrMediaPlayerMotionListener_unregisterReceiver);

     env->CallVoidMethod(obj,
          method_id);
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsSbrMediaPlayerMotionListener[] = {
    { "nativePauseMedia",
"("
"J"
")"
"V", reinterpret_cast<void*>(PauseMedia) },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  g_SbrMediaPlayerMotionListener_clazz =
      reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env,
          kSbrMediaPlayerMotionListenerClassPath).obj()));

  const int kMethodsSbrMediaPlayerMotionListenerSize =
      arraysize(kMethodsSbrMediaPlayerMotionListener);

  if (env->RegisterNatives(g_SbrMediaPlayerMotionListener_clazz,
                           kMethodsSbrMediaPlayerMotionListener,
                           kMethodsSbrMediaPlayerMotionListenerSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, g_SbrMediaPlayerMotionListener_clazz, __FILE__);
    return false;
  }

  return true;
}

}  // namespace media

#endif  // com_sec_chromium_chrome_browser_SbrMediaPlayerMotionListener_JNI
