// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/sec/chromium/chrome/browser/SbrChromeNativePreferences

#ifndef com_sec_chromium_chrome_browser_SbrChromeNativePreferences_JNI
#define com_sec_chromium_chrome_browser_SbrChromeNativePreferences_JNI

#include <jni.h>

#include "base/android/jni_generator/jni_generator_helper.h"

// Step 1: forward declarations.
namespace {
const char kSbrChromeNativePreferencesClassPath[] =
    "com/sec/chromium/chrome/browser/SbrChromeNativePreferences";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SbrChromeNativePreferences_clazz = NULL;

}  // namespace

static void Get(JNIEnv* env, jobject jcaller);

static jstring GetUserAgent(JNIEnv* env, jobject jcaller);

static void SetJavaScriptEnabled(JNIEnv* env, jobject jcaller,
    jboolean value);

static void SetLoadsImagesAutomatically(JNIEnv* env, jobject jcaller,
    jboolean value);

static void SetFontScaleFactor(JNIEnv* env, jobject jcaller,
    jfloat value);

static void SetForceEnableZoom(JNIEnv* env, jobject jcaller,
    jboolean value);

static void SetMinimumFontSize(JNIEnv* env, jobject jcaller,
    jint value);

static void SetAllowLocationEnabled(JNIEnv* env, jobject jcaller,
    jboolean value);

static void SetUserAgent(JNIEnv* env, jobject jcaller,
    jstring value);

static void SetRememberPasswordsEnabled(JNIEnv* env, jobject jcaller,
    jboolean value);

static void SetRememberFormDataEnabled(JNIEnv* env, jobject jcaller,
    jboolean value);

static void SetAutoFillEnabled(JNIEnv* env, jobject jcaller,
    jboolean value);

static void SetAutologinEnabled(JNIEnv* env, jobject jcaller,
    jboolean value);

static void SetNetworkPredictionEnabled(JNIEnv* env, jobject jcaller,
    jboolean value);

static void SetResolveNavigationErrorEnabled(JNIEnv* env, jobject jcaller,
    jboolean value);

static void SetRemoteDebuggingEnabled(JNIEnv* env, jobject jcaller,
    jboolean value);

static void SetOverviewModeEnabled(JNIEnv* env, jobject jcaller,
    jboolean value);

static void SetUsesEncodingDetector(JNIEnv* env, jobject jcaller,
    jboolean value);

static void SetTextEncoding(JNIEnv* env, jobject jcaller,
    jstring value);

static void SetBandwidthConservationOption(JNIEnv* env, jobject jcaller,
    jint value);

static void SetFontBoostingModeEnabled(JNIEnv* env, jobject jcaller,
    jboolean fontBoosting);

static void SetAutoCompleteIgnore(JNIEnv* env, jobject jcaller,
    jboolean autocomplete);

static void ClearBrowsingData(JNIEnv* env, jobject jcaller,
    jboolean history,
    jboolean cache,
    jboolean cookies_and_site_data,
    jboolean passwords,
    jboolean formData);

static void SetProxyServer(JNIEnv* env, jobject jcaller,
    jstring proxyServer);

static void SetHomeScreenMode(JNIEnv* env, jobject jcaller,
    jint mode);

static jobject GetAboutVersionStrings(JNIEnv* env, jobject jcaller);

static void ResetToDefaultSettings(JNIEnv* env, jobject jcaller);

static void SetAllowCookiesEnabled(JNIEnv* env, jobject jcaller,
    jboolean cookiesEnabled);

static void SetAllowPopupsEnabled(JNIEnv* env, jobject jcaller,
    jboolean value);

static void RemovePopupException(JNIEnv* env, jobject jcaller,
    jstring pattern);

static void SetPopupException(JNIEnv* env, jobject jcaller,
    jstring pattern,
    jboolean allow);

static void ClearPopUpSettings(JNIEnv* env, jobject jcaller);

static void SetSearchEngine(JNIEnv* env, jobject jcaller,
    jint value);

static void SetSearchSuggestEnabled(JNIEnv* env, jobject jcaller,
    jboolean value);

static void SetSearchEngineEx(JNIEnv* env, jobject jcaller,
    jobject value);

static jstring GetURLForSearchEngine(JNIEnv* env, jobject jcaller,
    jint value);

static jstring GetFaviconURLForSearchEngine(JNIEnv* env, jobject jcaller,
    jint value);

static jstring GetFaviconURLForCurrentSearchEngine(JNIEnv* env, jobject
    jcaller);

static jstring GetNameForCurrentSearchEngine(JNIEnv* env, jobject jcaller);

static void SetBingSearchEngineEnabledState(JNIEnv* env, jobject jcaller,
    jboolean enabled);

static void SetSavePageDirectory(JNIEnv* env, jobject jcaller,
    jstring storagePath);

static void SetImideoDebugMode(JNIEnv* env, jobject jcaller,
    jint mode);

static void SetAllowContentURLAccess(JNIEnv* env, jobject jcaller,
    jboolean value);

static void SetWebNotificationType(JNIEnv* env, jobject jcaller,
    jint value);

static void ClearWebNotification(JNIEnv* env, jobject jcaller);

static void GetCurrentCookieCount(JNIEnv* env, jobject jcaller);

static void GetCookiesForUrl(JNIEnv* env, jobject jcaller,
    jstring value);

static void GetOffTheRecordCookiesForUrl(JNIEnv* env, jobject jcaller,
    jstring value);

static void FlushCookieStore(JNIEnv* env, jobject jcaller);

static void GetCurrentCacheSize(JNIEnv* env, jobject jcaller);

static jboolean GetAutoCompleteStatus(JNIEnv* env, jobject jcaller);

// Step 2: method stubs.

static base::subtle::AtomicWord g_SbrChromeNativePreferences_onGetCookiesForUrl
    = 0;
static void Java_SbrChromeNativePreferences_onGetCookiesForUrl(JNIEnv* env,
    jobject obj, jstring cookies) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrChromeNativePreferences_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrChromeNativePreferences_clazz,
      "onGetCookiesForUrl",

"("
"Ljava/lang/String;"
")"
"V",
      &g_SbrChromeNativePreferences_onGetCookiesForUrl);

     env->CallVoidMethod(obj,
          method_id, cookies);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_SbrChromeNativePreferences_onGetCurrentCookieCount = 0;
static void Java_SbrChromeNativePreferences_onGetCurrentCookieCount(JNIEnv* env,
    jobject obj, jint noOfCookies) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrChromeNativePreferences_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrChromeNativePreferences_clazz,
      "onGetCurrentCookieCount",

"("
"I"
")"
"V",
      &g_SbrChromeNativePreferences_onGetCurrentCookieCount);

     env->CallVoidMethod(obj,
          method_id, noOfCookies);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_SbrChromeNativePreferences_onGetCurrentCacheSize = 0;
static void Java_SbrChromeNativePreferences_onGetCurrentCacheSize(JNIEnv* env,
    jobject obj, jint noOfCaches) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrChromeNativePreferences_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrChromeNativePreferences_clazz,
      "onGetCurrentCacheSize",

"("
"I"
")"
"V",
      &g_SbrChromeNativePreferences_onGetCurrentCacheSize);

     env->CallVoidMethod(obj,
          method_id, noOfCaches);
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsSbrChromeNativePreferences[] = {
    { "nativeGet",
"("
")"
"V", reinterpret_cast<void*>(Get) },
    { "nativeGetUserAgent",
"("
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetUserAgent) },
    { "nativeSetJavaScriptEnabled",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetJavaScriptEnabled) },
    { "nativeSetLoadsImagesAutomatically",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetLoadsImagesAutomatically) },
    { "nativeSetFontScaleFactor",
"("
"F"
")"
"V", reinterpret_cast<void*>(SetFontScaleFactor) },
    { "nativeSetForceEnableZoom",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetForceEnableZoom) },
    { "nativeSetMinimumFontSize",
"("
"I"
")"
"V", reinterpret_cast<void*>(SetMinimumFontSize) },
    { "nativeSetAllowLocationEnabled",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetAllowLocationEnabled) },
    { "nativeSetUserAgent",
"("
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(SetUserAgent) },
    { "nativeSetRememberPasswordsEnabled",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetRememberPasswordsEnabled) },
    { "nativeSetRememberFormDataEnabled",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetRememberFormDataEnabled) },
    { "nativeSetAutoFillEnabled",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetAutoFillEnabled) },
    { "nativeSetAutologinEnabled",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetAutologinEnabled) },
    { "nativeSetNetworkPredictionEnabled",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetNetworkPredictionEnabled) },
    { "nativeSetResolveNavigationErrorEnabled",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetResolveNavigationErrorEnabled) },
    { "nativeSetRemoteDebuggingEnabled",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetRemoteDebuggingEnabled) },
    { "nativeSetOverviewModeEnabled",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetOverviewModeEnabled) },
    { "nativeSetUsesEncodingDetector",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetUsesEncodingDetector) },
    { "nativeSetTextEncoding",
"("
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(SetTextEncoding) },
    { "nativeSetBandwidthConservationOption",
"("
"I"
")"
"V", reinterpret_cast<void*>(SetBandwidthConservationOption) },
    { "nativeSetFontBoostingModeEnabled",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetFontBoostingModeEnabled) },
    { "nativeSetAutoCompleteIgnore",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetAutoCompleteIgnore) },
    { "nativeClearBrowsingData",
"("
"Z"
"Z"
"Z"
"Z"
"Z"
")"
"V", reinterpret_cast<void*>(ClearBrowsingData) },
    { "nativeSetProxyServer",
"("
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(SetProxyServer) },
    { "nativeSetHomeScreenMode",
"("
"I"
")"
"V", reinterpret_cast<void*>(SetHomeScreenMode) },
    { "nativeGetAboutVersionStrings",
"("
")"
"Ljava/util/HashMap;", reinterpret_cast<void*>(GetAboutVersionStrings) },
    { "nativeResetToDefaultSettings",
"("
")"
"V", reinterpret_cast<void*>(ResetToDefaultSettings) },
    { "nativeSetAllowCookiesEnabled",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetAllowCookiesEnabled) },
    { "nativeSetAllowPopupsEnabled",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetAllowPopupsEnabled) },
    { "nativeRemovePopupException",
"("
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(RemovePopupException) },
    { "nativeSetPopupException",
"("
"Ljava/lang/String;"
"Z"
")"
"V", reinterpret_cast<void*>(SetPopupException) },
    { "nativeClearPopUpSettings",
"("
")"
"V", reinterpret_cast<void*>(ClearPopUpSettings) },
    { "nativeSetSearchEngine",
"("
"I"
")"
"V", reinterpret_cast<void*>(SetSearchEngine) },
    { "nativeSetSearchSuggestEnabled",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetSearchSuggestEnabled) },
    { "nativeSetSearchEngineEx",
"("
"Ljava/util/HashMap;"
")"
"V", reinterpret_cast<void*>(SetSearchEngineEx) },
    { "nativeGetURLForSearchEngine",
"("
"I"
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetURLForSearchEngine) },
    { "nativeGetFaviconURLForSearchEngine",
"("
"I"
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetFaviconURLForSearchEngine) },
    { "nativeGetFaviconURLForCurrentSearchEngine",
"("
")"
"Ljava/lang/String;",
    reinterpret_cast<void*>(GetFaviconURLForCurrentSearchEngine) },
    { "nativeGetNameForCurrentSearchEngine",
"("
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetNameForCurrentSearchEngine) },
    { "nativeSetBingSearchEngineEnabledState",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetBingSearchEngineEnabledState) },
    { "nativeSetSavePageDirectory",
"("
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(SetSavePageDirectory) },
    { "nativeSetImideoDebugMode",
"("
"I"
")"
"V", reinterpret_cast<void*>(SetImideoDebugMode) },
    { "nativeSetAllowContentURLAccess",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetAllowContentURLAccess) },
    { "nativeSetWebNotificationType",
"("
"I"
")"
"V", reinterpret_cast<void*>(SetWebNotificationType) },
    { "nativeClearWebNotification",
"("
")"
"V", reinterpret_cast<void*>(ClearWebNotification) },
    { "nativeGetCurrentCookieCount",
"("
")"
"V", reinterpret_cast<void*>(GetCurrentCookieCount) },
    { "nativeGetCookiesForUrl",
"("
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(GetCookiesForUrl) },
    { "nativeGetOffTheRecordCookiesForUrl",
"("
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(GetOffTheRecordCookiesForUrl) },
    { "nativeFlushCookieStore",
"("
")"
"V", reinterpret_cast<void*>(FlushCookieStore) },
    { "nativeGetCurrentCacheSize",
"("
")"
"V", reinterpret_cast<void*>(GetCurrentCacheSize) },
    { "nativeGetAutoCompleteStatus",
"("
")"
"Z", reinterpret_cast<void*>(GetAutoCompleteStatus) },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  g_SbrChromeNativePreferences_clazz =
      reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env,
          kSbrChromeNativePreferencesClassPath).obj()));

  const int kMethodsSbrChromeNativePreferencesSize =
      arraysize(kMethodsSbrChromeNativePreferences);

  if (env->RegisterNatives(g_SbrChromeNativePreferences_clazz,
                           kMethodsSbrChromeNativePreferences,
                           kMethodsSbrChromeNativePreferencesSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, g_SbrChromeNativePreferences_clazz, __FILE__);
    return false;
  }

  return true;
}

#endif  // com_sec_chromium_chrome_browser_SbrChromeNativePreferences_JNI
