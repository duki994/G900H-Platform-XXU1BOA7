// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/sec/chromium/chrome/browser/SbrHttpRequestHeader

#ifndef com_sec_chromium_chrome_browser_SbrHttpRequestHeader_JNI
#define com_sec_chromium_chrome_browser_SbrHttpRequestHeader_JNI

#include <jni.h>

#include "base/android/jni_generator/jni_generator_helper.h"

// Step 1: forward declarations.
namespace {
const char kSbrHttpRequestHeaderClassPath[] =
    "com/sec/chromium/chrome/browser/SbrHttpRequestHeader";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SbrHttpRequestHeader_clazz = NULL;

}  // namespace

namespace net {

static void AddExtraRequestHeader(JNIEnv* env, jclass jcaller,
    jstring key,
    jstring value);

static void RemoveExtraRequestHeader(JNIEnv* env, jclass jcaller,
    jstring key);

static void ClearExtraRequestHeader(JNIEnv* env, jclass jcaller);

static void UpdateExtraRequestHeader(JNIEnv* env, jclass jcaller,
    jstring key,
    jstring value);

// Step 2: method stubs.

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsSbrHttpRequestHeader[] = {
    { "nativeAddExtraRequestHeader",
"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(AddExtraRequestHeader) },
    { "nativeRemoveExtraRequestHeader",
"("
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(RemoveExtraRequestHeader) },
    { "nativeClearExtraRequestHeader",
"("
")"
"V", reinterpret_cast<void*>(ClearExtraRequestHeader) },
    { "nativeUpdateExtraRequestHeader",
"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(UpdateExtraRequestHeader) },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  g_SbrHttpRequestHeader_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kSbrHttpRequestHeaderClassPath).obj()));

  const int kMethodsSbrHttpRequestHeaderSize =
      arraysize(kMethodsSbrHttpRequestHeader);

  if (env->RegisterNatives(g_SbrHttpRequestHeader_clazz,
                           kMethodsSbrHttpRequestHeader,
                           kMethodsSbrHttpRequestHeaderSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, g_SbrHttpRequestHeader_clazz, __FILE__);
    return false;
  }

  return true;
}

}  // namespace net

#endif  // com_sec_chromium_chrome_browser_SbrHttpRequestHeader_JNI
