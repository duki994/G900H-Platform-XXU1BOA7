// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/ContentVideoView

#ifndef org_chromium_content_browser_ContentVideoView_JNI
#define org_chromium_content_browser_ContentVideoView_JNI

#include <jni.h>

#include "base/android/jni_generator/jni_generator_helper.h"

// Step 1: forward declarations.
namespace {
const char kContentVideoViewClassPath[] =
    "org/chromium/content/browser/ContentVideoView";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_ContentVideoView_clazz = NULL;

}  // namespace

namespace content {

static jobject GetSingletonJavaContentVideoView(JNIEnv* env, jclass jcaller);

// Step 2: method stubs.
static void ExitFullscreen(JNIEnv* env, jobject jcaller,
    jlong nativeContentVideoView,
    jboolean relaseMediaPlayer) {
  ContentVideoView* native =
      reinterpret_cast<ContentVideoView*>(nativeContentVideoView);
  CHECK_NATIVE_PTR(env, jcaller, native, "ExitFullscreen");
  return native->ExitFullscreen(env, jcaller, relaseMediaPlayer);
}

static jint GetCurrentPosition(JNIEnv* env, jobject jcaller,
    jlong nativeContentVideoView) {
  ContentVideoView* native =
      reinterpret_cast<ContentVideoView*>(nativeContentVideoView);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetCurrentPosition", 0);
  return native->GetCurrentPosition(env, jcaller);
}

static jint GetDurationInMilliSeconds(JNIEnv* env, jobject jcaller,
    jlong nativeContentVideoView) {
  ContentVideoView* native =
      reinterpret_cast<ContentVideoView*>(nativeContentVideoView);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetDurationInMilliSeconds", 0);
  return native->GetDurationInMilliSeconds(env, jcaller);
}

static void RequestMediaMetadata(JNIEnv* env, jobject jcaller,
    jlong nativeContentVideoView) {
  ContentVideoView* native =
      reinterpret_cast<ContentVideoView*>(nativeContentVideoView);
  CHECK_NATIVE_PTR(env, jcaller, native, "RequestMediaMetadata");
  return native->RequestMediaMetadata(env, jcaller);
}

static jint GetVideoWidth(JNIEnv* env, jobject jcaller,
    jlong nativeContentVideoView) {
  ContentVideoView* native =
      reinterpret_cast<ContentVideoView*>(nativeContentVideoView);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetVideoWidth", 0);
  return native->GetVideoWidth(env, jcaller);
}

static jint GetVideoHeight(JNIEnv* env, jobject jcaller,
    jlong nativeContentVideoView) {
  ContentVideoView* native =
      reinterpret_cast<ContentVideoView*>(nativeContentVideoView);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetVideoHeight", 0);
  return native->GetVideoHeight(env, jcaller);
}

static jboolean IsPlaying(JNIEnv* env, jobject jcaller,
    jlong nativeContentVideoView) {
  ContentVideoView* native =
      reinterpret_cast<ContentVideoView*>(nativeContentVideoView);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsPlaying", false);
  return native->IsPlaying(env, jcaller);
}

static void Pause(JNIEnv* env, jobject jcaller,
    jlong nativeContentVideoView) {
  ContentVideoView* native =
      reinterpret_cast<ContentVideoView*>(nativeContentVideoView);
  CHECK_NATIVE_PTR(env, jcaller, native, "Pause");
  return native->Pause(env, jcaller);
}

static void Play(JNIEnv* env, jobject jcaller,
    jlong nativeContentVideoView) {
  ContentVideoView* native =
      reinterpret_cast<ContentVideoView*>(nativeContentVideoView);
  CHECK_NATIVE_PTR(env, jcaller, native, "Play");
  return native->Play(env, jcaller);
}

static void SeekTo(JNIEnv* env, jobject jcaller,
    jlong nativeContentVideoView,
    jint msec) {
  ContentVideoView* native =
      reinterpret_cast<ContentVideoView*>(nativeContentVideoView);
  CHECK_NATIVE_PTR(env, jcaller, native, "SeekTo");
  return native->SeekTo(env, jcaller, msec);
}

static void SetSurface(JNIEnv* env, jobject jcaller,
    jlong nativeContentVideoView,
    jobject surface) {
  ContentVideoView* native =
      reinterpret_cast<ContentVideoView*>(nativeContentVideoView);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetSurface");
  return native->SetSurface(env, jcaller, surface);
}

static base::subtle::AtomicWord g_ContentVideoView_onMediaPlayerError = 0;
static void Java_ContentVideoView_onMediaPlayerError(JNIEnv* env, jobject obj,
    jint errorType) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentVideoView_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentVideoView_clazz,
      "onMediaPlayerError",

"("
"I"
")"
"V",
      &g_ContentVideoView_onMediaPlayerError);

     env->CallVoidMethod(obj,
          method_id, errorType);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentVideoView_onVideoSizeChanged = 0;
static void Java_ContentVideoView_onVideoSizeChanged(JNIEnv* env, jobject obj,
    jint width,
    jint height) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentVideoView_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentVideoView_clazz,
      "onVideoSizeChanged",

"("
"I"
"I"
")"
"V",
      &g_ContentVideoView_onVideoSizeChanged);

     env->CallVoidMethod(obj,
          method_id, width, height);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentVideoView_onBufferingUpdate = 0;
static void Java_ContentVideoView_onBufferingUpdate(JNIEnv* env, jobject obj,
    jint percent) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentVideoView_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentVideoView_clazz,
      "onBufferingUpdate",

"("
"I"
")"
"V",
      &g_ContentVideoView_onBufferingUpdate);

     env->CallVoidMethod(obj,
          method_id, percent);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentVideoView_onPlaybackComplete = 0;
static void Java_ContentVideoView_onPlaybackComplete(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentVideoView_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentVideoView_clazz,
      "onPlaybackComplete",

"("
")"
"V",
      &g_ContentVideoView_onPlaybackComplete);

     env->CallVoidMethod(obj,
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentVideoView_onUpdateMediaMetadata = 0;
static void Java_ContentVideoView_onUpdateMediaMetadata(JNIEnv* env, jobject
    obj, jint videoWidth,
    jint videoHeight,
    jint duration,
    jboolean canPause,
    jboolean canSeekBack,
    jboolean canSeekForward) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentVideoView_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentVideoView_clazz,
      "onUpdateMediaMetadata",

"("
"I"
"I"
"I"
"Z"
"Z"
"Z"
")"
"V",
      &g_ContentVideoView_onUpdateMediaMetadata);

     env->CallVoidMethod(obj,
          method_id, videoWidth, videoHeight, duration, canPause, canSeekBack,
              canSeekForward);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentVideoView_openVideo = 0;
static void Java_ContentVideoView_openVideo(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentVideoView_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentVideoView_clazz,
      "openVideo",

"("
")"
"V",
      &g_ContentVideoView_openVideo);

     env->CallVoidMethod(obj,
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentVideoView_createContentVideoView = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_ContentVideoView_createContentVideoView(JNIEnv* env, jobject context,
    jlong nativeContentVideoView,
    jobject client,
    jboolean legacy) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, g_ContentVideoView_clazz,
      g_ContentVideoView_clazz, NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ContentVideoView_clazz,
      "createContentVideoView",

"("
"Landroid/content/Context;"
"J"
"Lorg/chromium/content/browser/ContentVideoViewClient;"
"Z"
")"
"Lorg/chromium/content/browser/ContentVideoView;",
      &g_ContentVideoView_createContentVideoView);

  jobject ret =
      env->CallStaticObjectMethod(g_ContentVideoView_clazz,
          method_id, context, nativeContentVideoView, client, legacy);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_ContentVideoView_onExitFullscreen = 0;
static void Java_ContentVideoView_onExitFullscreen(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentVideoView_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentVideoView_clazz,
      "onExitFullscreen",

"("
")"
"V",
      &g_ContentVideoView_onExitFullscreen);

     env->CallVoidMethod(obj,
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentVideoView_destroyContentVideoView = 0;
static void Java_ContentVideoView_destroyContentVideoView(JNIEnv* env, jobject
    obj, jboolean nativeViewDestroyed) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentVideoView_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentVideoView_clazz,
      "destroyContentVideoView",

"("
"Z"
")"
"V",
      &g_ContentVideoView_destroyContentVideoView);

     env->CallVoidMethod(obj,
          method_id, nativeViewDestroyed);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_ContentVideoView_getNativeViewAndroid = 0;
static jlong Java_ContentVideoView_getNativeViewAndroid(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_ContentVideoView_clazz, 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentVideoView_clazz,
      "getNativeViewAndroid",

"("
")"
"J",
      &g_ContentVideoView_getNativeViewAndroid);

  jlong ret =
      env->CallLongMethod(obj,
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsContentVideoView[] = {
    { "nativeGetSingletonJavaContentVideoView",
"("
")"
"Lorg/chromium/content/browser/ContentVideoView;",
    reinterpret_cast<void*>(GetSingletonJavaContentVideoView) },
    { "nativeExitFullscreen",
"("
"J"
"Z"
")"
"V", reinterpret_cast<void*>(ExitFullscreen) },
    { "nativeGetCurrentPosition",
"("
"J"
")"
"I", reinterpret_cast<void*>(GetCurrentPosition) },
    { "nativeGetDurationInMilliSeconds",
"("
"J"
")"
"I", reinterpret_cast<void*>(GetDurationInMilliSeconds) },
    { "nativeRequestMediaMetadata",
"("
"J"
")"
"V", reinterpret_cast<void*>(RequestMediaMetadata) },
    { "nativeGetVideoWidth",
"("
"J"
")"
"I", reinterpret_cast<void*>(GetVideoWidth) },
    { "nativeGetVideoHeight",
"("
"J"
")"
"I", reinterpret_cast<void*>(GetVideoHeight) },
    { "nativeIsPlaying",
"("
"J"
")"
"Z", reinterpret_cast<void*>(IsPlaying) },
    { "nativePause",
"("
"J"
")"
"V", reinterpret_cast<void*>(Pause) },
    { "nativePlay",
"("
"J"
")"
"V", reinterpret_cast<void*>(Play) },
    { "nativeSeekTo",
"("
"J"
"I"
")"
"V", reinterpret_cast<void*>(SeekTo) },
    { "nativeSetSurface",
"("
"J"
"Landroid/view/Surface;"
")"
"V", reinterpret_cast<void*>(SetSurface) },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  g_ContentVideoView_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kContentVideoViewClassPath).obj()));

  const int kMethodsContentVideoViewSize = arraysize(kMethodsContentVideoView);

  if (env->RegisterNatives(g_ContentVideoView_clazz,
                           kMethodsContentVideoView,
                           kMethodsContentVideoViewSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, g_ContentVideoView_clazz, __FILE__);
    return false;
  }

  return true;
}

}  // namespace content

#endif  // org_chromium_content_browser_ContentVideoView_JNI
