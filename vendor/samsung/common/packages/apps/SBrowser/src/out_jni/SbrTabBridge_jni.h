// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/sec/chromium/chrome/browser/SbrTabBridge

#ifndef com_sec_chromium_chrome_browser_SbrTabBridge_JNI
#define com_sec_chromium_chrome_browser_SbrTabBridge_JNI

#include <jni.h>

#include "base/android/jni_generator/jni_generator_helper.h"

// Step 1: forward declarations.
namespace {
const char kSbrTabBridgeClassPath[] =
    "com/sec/chromium/chrome/browser/SbrTabBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SbrTabBridge_clazz = NULL;

}  // namespace

static jlong Init(JNIEnv* env, jobject jcaller);

static jlong RestoreStateFromByteArray(JNIEnv* env, jclass jcaller,
    jbyteArray paramArrayOfByte);

static void CreateHistoricalTabFromState(JNIEnv* env, jclass jcaller,
    jbyteArray paramArrayOfByte,
    jint tabIndex);

// Step 2: method stubs.
static void Destroy(JNIEnv* env, jobject jcaller,
    jlong nativeSbrTabBridge) {
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, jcaller);
}

static jbyteArray GetStateAsByteArray(JNIEnv* env, jobject jcaller,
    jlong nativeSbrTabBridge,
    jobject mContentViewCore) {
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetStateAsByteArray", NULL);
  return native->GetStateAsByteArray(env, jcaller, mContentViewCore).Release();
}

static void CreateHistoricalTab(JNIEnv* env, jobject jcaller,
    jlong nativeSbrTabBridge,
    jobject mContentViewCore,
    jint tab_index) {
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "CreateHistoricalTab");
  return native->CreateHistoricalTab(env, jcaller, mContentViewCore, tab_index);
}

static jboolean IsInitialNavigation(JNIEnv* env, jobject jcaller,
    jlong nativeSbrTabBridge,
    jobject mContentViewCore) {
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsInitialNavigation", false);
  return native->IsInitialNavigation(env, jcaller, mContentViewCore);
}

static jint GetRenderProcessPrivateSizeKBytes(JNIEnv* env, jobject jcaller,
    jlong nativeSbrTabBridge,
    jobject mContentViewCore) {
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetRenderProcessPrivateSizeKBytes",
      0);
  return native->GetRenderProcessPrivateSizeKBytes(env, jcaller,
      mContentViewCore);
}

static void PurgeRenderProcessNativeMemory(JNIEnv* env, jobject jcaller,
    jlong nativeSbrTabBridge,
    jobject mContentViewCore) {
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "PurgeRenderProcessNativeMemory");
  return native->PurgeRenderProcessNativeMemory(env, jcaller, mContentViewCore);
}

static void SetInterceptNavigationDelegate(JNIEnv* env, jobject jcaller,
    jlong nativeSbrTabBridge,
    jobject interceptNavigationDelegate,
    jobject mContentViewCore) {
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetInterceptNavigationDelegate");
  return native->SetInterceptNavigationDelegate(env, jcaller,
      interceptNavigationDelegate, mContentViewCore);
}

static void SetSbrowserContentBrowserClientDelegate(JNIEnv* env, jobject
    jcaller,
    jlong nativeSbrTabBridge,
    jobject delegate,
    jobject contentViewCore) {
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  CHECK_NATIVE_PTR(env, jcaller, native,
      "SetSbrowserContentBrowserClientDelegate");
  return native->SetSbrowserContentBrowserClientDelegate(env, jcaller, delegate,
      contentViewCore);
}

static jint GetRenderProcessPid(JNIEnv* env, jobject jcaller,
    jlong nativeSbrTabBridge,
    jobject mContentViewCore) {
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetRenderProcessPid", 0);
  return native->GetRenderProcessPid(env, jcaller, mContentViewCore);
}

static void UpdateThumbnailWithOriginalURL(JNIEnv* env, jobject jcaller,
    jlong nativeSbrTabBridge,
    jobject contentViewCore,
    jstring url,
    jobject bitmap) {
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateThumbnailWithOriginalURL");
  return native->UpdateThumbnailWithOriginalURL(env, jcaller, contentViewCore,
      url, bitmap);
}

static void RemoveBlacklistURL(JNIEnv* env, jobject jcaller,
    jlong nativeSbrTabBridge,
    jstring url) {
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "RemoveBlacklistURL");
  return native->RemoveBlacklistURL(env, jcaller, url);
}

static void StartFinding(JNIEnv* env, jobject jcaller,
    jlong nativeSbrTabBridge,
    jobject mContentViewCore,
    jstring searchString,
    jboolean forwardDirection,
    jboolean caseSensitive) {
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "StartFinding");
  return native->StartFinding(env, jcaller, mContentViewCore, searchString,
      forwardDirection, caseSensitive);
}

static void StopFinding(JNIEnv* env, jobject jcaller,
    jlong nativeSbrTabBridge,
    jobject mContentViewCore,
    jint selectionAction) {
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "StopFinding");
  return native->StopFinding(env, jcaller, mContentViewCore, selectionAction);
}

static void RequestFindMatchRects(JNIEnv* env, jobject jcaller,
    jlong nativeSbrTabBridge,
    jobject mContentViewCore,
    jint currentVersion) {
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "RequestFindMatchRects");
  return native->RequestFindMatchRects(env, jcaller, mContentViewCore,
      currentVersion);
}

static jstring GetPreviousFindText(JNIEnv* env, jobject jcaller,
    jlong nativeSbrTabBridge,
    jobject mContentViewCore) {
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetPreviousFindText", NULL);
  return native->GetPreviousFindText(env, jcaller, mContentViewCore).Release();
}

static void ActivateNearestFindResult(JNIEnv* env, jobject jcaller,
    jlong nativeSbrTabBridge,
    jobject mContentViewCore,
    jfloat x,
    jfloat y) {
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "ActivateNearestFindResult");
  return native->ActivateNearestFindResult(env, jcaller, mContentViewCore, x,
      y);
}

static jboolean IsURLHasThumbnail(JNIEnv* env, jobject jcaller,
    jlong nativeSbrTabBridge,
    jstring url) {
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsURLHasThumbnail", false);
  return native->IsURLHasThumbnail(env, jcaller, url);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsSbrTabBridge[] = {
    { "nativeInit",
"("
")"
"J", reinterpret_cast<void*>(Init) },
    { "nativeDestroy",
"("
"J"
")"
"V", reinterpret_cast<void*>(Destroy) },
    { "nativeGetStateAsByteArray",
"("
"J"
"Lorg/chromium/content/browser/ContentViewCore;"
")"
"[B", reinterpret_cast<void*>(GetStateAsByteArray) },
    { "nativeRestoreStateFromByteArray",
"("
"[B"
")"
"J", reinterpret_cast<void*>(RestoreStateFromByteArray) },
    { "nativeCreateHistoricalTab",
"("
"J"
"Lorg/chromium/content/browser/ContentViewCore;"
"I"
")"
"V", reinterpret_cast<void*>(CreateHistoricalTab) },
    { "nativeCreateHistoricalTabFromState",
"("
"[B"
"I"
")"
"V", reinterpret_cast<void*>(CreateHistoricalTabFromState) },
    { "nativeIsInitialNavigation",
"("
"J"
"Lorg/chromium/content/browser/ContentViewCore;"
")"
"Z", reinterpret_cast<void*>(IsInitialNavigation) },
    { "nativeGetRenderProcessPrivateSizeKBytes",
"("
"J"
"Lorg/chromium/content/browser/ContentViewCore;"
")"
"I", reinterpret_cast<void*>(GetRenderProcessPrivateSizeKBytes) },
    { "nativePurgeRenderProcessNativeMemory",
"("
"J"
"Lorg/chromium/content/browser/ContentViewCore;"
")"
"V", reinterpret_cast<void*>(PurgeRenderProcessNativeMemory) },
    { "nativeSetInterceptNavigationDelegate",
"("
"J"
"Lorg/chromium/components/navigation_interception/InterceptNavigationDelegate;"
"Lorg/chromium/content/browser/ContentViewCore;"
")"
"V", reinterpret_cast<void*>(SetInterceptNavigationDelegate) },
    { "nativeSetSbrowserContentBrowserClientDelegate",
"("
"J"
"Lcom/sec/chromium/chrome/browser/SbrowserContentBrowserClientDelegate;"
"Lorg/chromium/content/browser/ContentViewCore;"
")"
"V", reinterpret_cast<void*>(SetSbrowserContentBrowserClientDelegate) },
    { "nativeGetRenderProcessPid",
"("
"J"
"Lorg/chromium/content/browser/ContentViewCore;"
")"
"I", reinterpret_cast<void*>(GetRenderProcessPid) },
    { "nativeUpdateThumbnailWithOriginalURL",
"("
"J"
"Lorg/chromium/content/browser/ContentViewCore;"
"Ljava/lang/String;"
"Landroid/graphics/Bitmap;"
")"
"V", reinterpret_cast<void*>(UpdateThumbnailWithOriginalURL) },
    { "nativeRemoveBlacklistURL",
"("
"J"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(RemoveBlacklistURL) },
    { "nativeStartFinding",
"("
"J"
"Lorg/chromium/content/browser/ContentViewCore;"
"Ljava/lang/String;"
"Z"
"Z"
")"
"V", reinterpret_cast<void*>(StartFinding) },
    { "nativeStopFinding",
"("
"J"
"Lorg/chromium/content/browser/ContentViewCore;"
"I"
")"
"V", reinterpret_cast<void*>(StopFinding) },
    { "nativeRequestFindMatchRects",
"("
"J"
"Lorg/chromium/content/browser/ContentViewCore;"
"I"
")"
"V", reinterpret_cast<void*>(RequestFindMatchRects) },
    { "nativeGetPreviousFindText",
"("
"J"
"Lorg/chromium/content/browser/ContentViewCore;"
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetPreviousFindText) },
    { "nativeActivateNearestFindResult",
"("
"J"
"Lorg/chromium/content/browser/ContentViewCore;"
"F"
"F"
")"
"V", reinterpret_cast<void*>(ActivateNearestFindResult) },
    { "nativeIsURLHasThumbnail",
"("
"J"
"Ljava/lang/String;"
")"
"Z", reinterpret_cast<void*>(IsURLHasThumbnail) },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  g_SbrTabBridge_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kSbrTabBridgeClassPath).obj()));

  const int kMethodsSbrTabBridgeSize = arraysize(kMethodsSbrTabBridge);

  if (env->RegisterNatives(g_SbrTabBridge_clazz,
                           kMethodsSbrTabBridge,
                           kMethodsSbrTabBridgeSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, g_SbrTabBridge_clazz, __FILE__);
    return false;
  }

  return true;
}

#endif  // com_sec_chromium_chrome_browser_SbrTabBridge_JNI
