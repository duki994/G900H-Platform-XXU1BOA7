// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/sec/chromium/chrome/browser/SbrUrlFilter

#ifndef com_sec_chromium_chrome_browser_SbrUrlFilter_JNI
#define com_sec_chromium_chrome_browser_SbrUrlFilter_JNI

#include <jni.h>

#include "base/android/jni_generator/jni_generator_helper.h"

// Step 1: forward declarations.
namespace {
const char kSbrUrlFilterClassPath[] =
    "com/sec/chromium/chrome/browser/SbrUrlFilter";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SbrUrlFilter_clazz = NULL;

}  // namespace

namespace net {

// Step 2: method stubs.

static base::subtle::AtomicWord g_SbrUrlFilter_isBlockedUrl = 0;
static jboolean Java_SbrUrlFilter_isBlockedUrl(JNIEnv* env, jstring url) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, g_SbrUrlFilter_clazz,
      g_SbrUrlFilter_clazz, false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_SbrUrlFilter_clazz,
      "isBlockedUrl",

"("
"Ljava/lang/String;"
")"
"Z",
      &g_SbrUrlFilter_isBlockedUrl);

  jboolean ret =
      env->CallStaticBooleanMethod(g_SbrUrlFilter_clazz,
          method_id, url);
  jni_generator::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {
  g_SbrUrlFilter_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kSbrUrlFilterClassPath).obj()));

  return true;
}

}  // namespace net

#endif  // com_sec_chromium_chrome_browser_SbrUrlFilter_JNI
