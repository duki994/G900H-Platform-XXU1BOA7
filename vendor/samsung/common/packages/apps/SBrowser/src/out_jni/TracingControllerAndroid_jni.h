// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/TracingControllerAndroid

#ifndef org_chromium_content_browser_TracingControllerAndroid_JNI
#define org_chromium_content_browser_TracingControllerAndroid_JNI

#include <jni.h>

#include "base/android/jni_generator/jni_generator_helper.h"

// Step 1: forward declarations.
namespace {
const char kTracingControllerAndroidClassPath[] =
    "org/chromium/content/browser/TracingControllerAndroid";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_TracingControllerAndroid_clazz = NULL;

}  // namespace

namespace content {

static jlong Init(JNIEnv* env, jobject jcaller);

static jstring GetDefaultCategories(JNIEnv* env, jobject jcaller);

// Step 2: method stubs.
static void Destroy(JNIEnv* env, jobject jcaller,
    jlong nativeTracingControllerAndroid) {
  TracingControllerAndroid* native =
      reinterpret_cast<TracingControllerAndroid*>(nativeTracingControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, jcaller);
}

static jboolean StartTracing(JNIEnv* env, jobject jcaller,
    jlong nativeTracingControllerAndroid,
    jstring filename,
    jstring categories,
    jboolean recordContinuously) {
  TracingControllerAndroid* native =
      reinterpret_cast<TracingControllerAndroid*>(nativeTracingControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "StartTracing", false);
  return native->StartTracing(env, jcaller, filename, categories,
      recordContinuously);
}

static void StopTracing(JNIEnv* env, jobject jcaller,
    jlong nativeTracingControllerAndroid) {
  TracingControllerAndroid* native =
      reinterpret_cast<TracingControllerAndroid*>(nativeTracingControllerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "StopTracing");
  return native->StopTracing(env, jcaller);
}

static base::subtle::AtomicWord g_TracingControllerAndroid_onTracingStopped = 0;
static void Java_TracingControllerAndroid_onTracingStopped(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_TracingControllerAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_TracingControllerAndroid_clazz,
      "onTracingStopped",

"("
")"
"V",
      &g_TracingControllerAndroid_onTracingStopped);

     env->CallVoidMethod(obj,
          method_id);
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsTracingControllerAndroid[] = {
    { "nativeInit",
"("
")"
"J", reinterpret_cast<void*>(Init) },
    { "nativeDestroy",
"("
"J"
")"
"V", reinterpret_cast<void*>(Destroy) },
    { "nativeStartTracing",
"("
"J"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Z"
")"
"Z", reinterpret_cast<void*>(StartTracing) },
    { "nativeStopTracing",
"("
"J"
")"
"V", reinterpret_cast<void*>(StopTracing) },
    { "nativeGetDefaultCategories",
"("
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetDefaultCategories) },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  g_TracingControllerAndroid_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kTracingControllerAndroidClassPath).obj()));

  const int kMethodsTracingControllerAndroidSize =
      arraysize(kMethodsTracingControllerAndroid);

  if (env->RegisterNatives(g_TracingControllerAndroid_clazz,
                           kMethodsTracingControllerAndroid,
                           kMethodsTracingControllerAndroidSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, g_TracingControllerAndroid_clazz, __FILE__);
    return false;
  }

  return true;
}

}  // namespace content

#endif  // org_chromium_content_browser_TracingControllerAndroid_JNI
