// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/sec/chromium/chrome/browser/SbrLocationBar

#ifndef com_sec_chromium_chrome_browser_SbrLocationBar_JNI
#define com_sec_chromium_chrome_browser_SbrLocationBar_JNI

#include <jni.h>

#include "base/android/jni_generator/jni_generator_helper.h"

// Step 1: forward declarations.
namespace {
const char kSbrLocationBarClassPath[] =
    "com/sec/chromium/chrome/browser/SbrLocationBar";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SbrLocationBar_clazz = NULL;

}  // namespace

static jlong Init(JNIEnv* env, jobject jcaller);

// Step 2: method stubs.
static void Destroy(JNIEnv* env, jobject jcaller,
    jlong nativeSbrLocationBar) {
  SbrLocationBar* native =
      reinterpret_cast<SbrLocationBar*>(nativeSbrLocationBar);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, jcaller);
}

static void OnSecurityButtonClicked(JNIEnv* env, jobject jcaller,
    jlong nativeSbrLocationBar,
    jobject context,
    jobject var1) {
  SbrLocationBar* native =
      reinterpret_cast<SbrLocationBar*>(nativeSbrLocationBar);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnSecurityButtonClicked");
  return native->OnSecurityButtonClicked(env, jcaller, context, var1);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsSbrLocationBar[] = {
    { "nativeDestroy",
"("
"J"
")"
"V", reinterpret_cast<void*>(Destroy) },
    { "nativeInit",
"("
")"
"J", reinterpret_cast<void*>(Init) },
    { "nativeOnSecurityButtonClicked",
"("
"J"
"Landroid/content/Context;"
"Lorg/chromium/content/browser/ContentViewCore;"
")"
"V", reinterpret_cast<void*>(OnSecurityButtonClicked) },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  g_SbrLocationBar_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kSbrLocationBarClassPath).obj()));

  const int kMethodsSbrLocationBarSize = arraysize(kMethodsSbrLocationBar);

  if (env->RegisterNatives(g_SbrLocationBar_clazz,
                           kMethodsSbrLocationBar,
                           kMethodsSbrLocationBarSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, g_SbrLocationBar_clazz, __FILE__);
    return false;
  }

  return true;
}

#endif  // com_sec_chromium_chrome_browser_SbrLocationBar_JNI
