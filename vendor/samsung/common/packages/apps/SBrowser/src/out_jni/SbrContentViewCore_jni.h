// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/sec/chromium/content/browser/SbrContentViewCore

#ifndef com_sec_chromium_content_browser_SbrContentViewCore_JNI
#define com_sec_chromium_content_browser_SbrContentViewCore_JNI

#include <jni.h>

#include "base/android/jni_generator/jni_generator_helper.h"

// Step 1: forward declarations.
namespace {
const char kSbrContentViewCoreClassPath[] =
    "com/sec/chromium/content/browser/SbrContentViewCore";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SbrContentViewCore_clazz = NULL;

}  // namespace

namespace content {

static jlong Init(JNIEnv* env, jobject jcaller,
    jlong webContentsPtr,
    jlong viewAndroidPtr,
    jlong windowAndroidPtr);

static void DestroyIncognitoProfile(JNIEnv* env, jclass jcaller);

// Step 2: method stubs.
static void SetUIResourceBitmap(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl,
    jint layer_type,
    jobject bitmap) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetUIResourceBitmap");
  return native->SetUIResourceBitmap(env, jcaller, layer_type, bitmap);
}

static void EnableUIResourceLayer(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl,
    jint layer_type,
    jboolean enable) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "EnableUIResourceLayer");
  return native->EnableUIResourceLayer(env, jcaller, layer_type, enable);
}

static void MoveUIResourceLayer(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl,
    jint layer_type,
    jfloat offsetX,
    jfloat offsetY) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "MoveUIResourceLayer");
  return native->MoveUIResourceLayer(env, jcaller, layer_type, offsetX,
      offsetY);
}

static jint HandleUIResourceLayerEvent(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl,
    jfloat offsetX,
    jfloat offsetY) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "HandleUIResourceLayerEvent", 0);
  return native->HandleUIResourceLayerEvent(env, jcaller, offsetX, offsetY);
}

static jboolean IsIncognito(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsIncognito", false);
  return native->IsIncognito(env, jcaller);
}

static jstring GetContentMimeType(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetContentMimeType", NULL);
  return native->GetContentMimeType(env, jcaller).Release();
}

static void GetSelectionVisibilityStatus(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetSelectionVisibilityStatus");
  return native->GetSelectionVisibilityStatus(env, jcaller);
}

static void CheckBelongToSelection(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl,
    jint TouchX,
    jint TouchY) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "CheckBelongToSelection");
  return native->CheckBelongToSelection(env, jcaller, TouchX, TouchY);
}

static void GetSelectionBitmap(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetSelectionBitmap");
  return native->GetSelectionBitmap(env, jcaller);
}

static void selectClosestWord(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl,
    jint TouchX,
    jint TouchY) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "selectClosestWord");
  return native->selectClosestWord(env, jcaller, TouchX, TouchY);
}

static void clearTextSelection(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "clearTextSelection");
  return native->clearTextSelection(env, jcaller);
}

static void moveFocusToNext(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "moveFocusToNext");
  return native->moveFocusToNext(env, jcaller);
}

static void moveFocusToPrevious(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "moveFocusToPrevious");
  return native->moveFocusToPrevious(env, jcaller);
}

static void PerformLongPress(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl,
    jlong timeMs,
    jfloat x,
    jfloat y,
    jboolean linkPreviewTap) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "PerformLongPress");
  return native->PerformLongPress(env, jcaller, timeMs, x, y, linkPreviewTap);
}

static void GetSelectionMarkup(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetSelectionMarkup");
  return native->GetSelectionMarkup(env, jcaller);
}

static void SetPasswordEcho(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl,
    jboolean pwdEchoEnabled) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetPasswordEcho");
  return native->SetPasswordEcho(env, jcaller, pwdEchoEnabled);
}

static void performLongClickOnFocussedNode(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl,
    jlong time_ms) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "performLongClickOnFocussedNode");
  return native->performLongClickOnFocussedNode(env, jcaller, time_ms);
}

static void PopulateHardwareBitmap(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl,
    jint x,
    jint y,
    jint width,
    jint height,
    jboolean configRGB565) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "PopulateHardwareBitmap");
  return native->PopulateHardwareBitmap(env, jcaller, x, y, width, height,
      configRGB565);
}

static void PopulateSoftwareBitmap(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl,
    jint x,
    jint y,
    jint width,
    jint height,
    jfloat pageScaleFactor) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "PopulateSoftwareBitmap");
  return native->PopulateSoftwareBitmap(env, jcaller, x, y, width, height,
      pageScaleFactor);
}

static jboolean PopulateBitmapFromDelegatedLayerSync(JNIEnv* env, jobject
    jcaller,
    jlong nativeSbrContentViewCoreImpl,
    jint x,
    jint y,
    jint width,
    jint height,
    jobject bitmap) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "PopulateBitmapFromDelegatedLayerSync",
      false);
  return native->PopulateBitmapFromDelegatedLayerSync(env, jcaller, x, y, width,
      height, bitmap);
}

static jboolean GetBitmapFromCompositor(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl,
    jint x,
    jint y,
    jint width,
    jint height,
    jobject bitmap,
    jint imageFormat) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetBitmapFromCompositor", false);
  return native->GetBitmapFromCompositor(env, jcaller, x, y, width, height,
      bitmap, imageFormat);
}

static void HandleSelectionDrop(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl,
    jint x,
    jint y,
    jstring text) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "HandleSelectionDrop");
  return native->HandleSelectionDrop(env, jcaller, x, y, text);
}

static void LoadDataWithBaseUrl(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl,
    jstring data,
    jstring baseUrl,
    jstring mimeType,
    jstring encoding,
    jstring historyUrl) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "LoadDataWithBaseUrl");
  return native->LoadDataWithBaseUrl(env, jcaller, data, baseUrl, mimeType,
      encoding, historyUrl);
}

static jboolean IsWMLPage(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsWMLPage", false);
  return native->IsWMLPage(env, jcaller);
}

static void ShowHoverFocus(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl,
    jfloat x,
    jfloat y,
    jlong timeMs,
    jboolean high_light) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "ShowHoverFocus");
  return native->ShowHoverFocus(env, jcaller, x, y, timeMs, high_light);
}

static void SavePageAs(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SavePageAs");
  return native->SavePageAs(env, jcaller);
}

static void GetBitmapFromCachedResource(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl,
    jstring imageUrl) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetBitmapFromCachedResource");
  return native->GetBitmapFromCachedResource(env, jcaller, imageUrl);
}

static jboolean PopulateBitmapFromCompositor(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl,
    jobject bitmap) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "PopulateBitmapFromCompositor", false);
  return native->PopulateBitmapFromCompositor(env, jcaller, bitmap);
}

static void SetBackgroundColor(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetBackgroundColor");
  return native->SetBackgroundColor(env, jcaller);
}

static void RecognizeArticle(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl,
    jint mode) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "RecognizeArticle");
  return native->RecognizeArticle(env, jcaller, mode);
}

static void SbrScrollBy(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl,
    jlong timeMs,
    jint x,
    jint y,
    jfloat deltaX,
    jfloat deltaY) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SbrScrollBy");
  return native->SbrScrollBy(env, jcaller, timeMs, x, y, deltaX, deltaY);
}

static void HandleMouseClickWithCtrlkey(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl,
    jint x,
    jint y) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "HandleMouseClickWithCtrlkey");
  return native->HandleMouseClickWithCtrlkey(env, jcaller, x, y);
}

static void GetTouchedFixedElementHeight(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl,
    jint touchX,
    jint touchY) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetTouchedFixedElementHeight");
  return native->GetTouchedFixedElementHeight(env, jcaller, touchX, touchY);
}

static void HandleSelectionDropOnFocusedInput(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl,
    jstring text,
    jint dropAction) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "HandleSelectionDropOnFocusedInput");
  return native->HandleSelectionDropOnFocusedInput(env, jcaller, text,
      dropAction);
}

static void GetFocusedInputInfo(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetFocusedInputInfo");
  return native->GetFocusedInputInfo(env, jcaller);
}

static jboolean Crashed(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "Crashed", false);
  return native->Crashed(env, jcaller);
}

static void ResetTabState(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "ResetTabState");
  return native->ResetTabState(env, jcaller);
}

static jboolean NeedsReload(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "NeedsReload", false);
  return native->NeedsReload(env, jcaller);
}

static void SetTopControlsHeight(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl,
    jint top_controls_height) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetTopControlsHeight");
  return native->SetTopControlsHeight(env, jcaller, top_controls_height);
}

static void SetScrollType(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl,
    jint type) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetScrollType");
  return native->SetScrollType(env, jcaller, type);
}

static void GetSelectionMarkupWithBounds(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetSelectionMarkupWithBounds");
  return native->GetSelectionMarkupWithBounds(env, jcaller);
}

static void SelectBetweenCoordinates(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl,
    jfloat x1,
    jfloat y1,
    jfloat x2,
    jfloat y2,
    jboolean isLastTouchPoint,
    jboolean isFirstTouchPoint) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SelectBetweenCoordinates");
  return native->SelectBetweenCoordinates(env, jcaller, x1, y1, x2, y2,
      isLastTouchPoint, isFirstTouchPoint);
}

static jboolean IsPlayerEmpty(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsPlayerEmpty", false);
  return native->IsPlayerEmpty(env, jcaller);
}

static void OnPauseVideo(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnPauseVideo");
  return native->OnPauseVideo(env, jcaller);
}

static jboolean IsAnyVideoPlaying(JNIEnv* env, jobject jcaller,
    jlong nativeSbrContentViewCoreImpl) {
  SbrContentViewCoreImpl* native =
      reinterpret_cast<SbrContentViewCoreImpl*>(nativeSbrContentViewCoreImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsAnyVideoPlaying", false);
  return native->IsAnyVideoPlaying(env, jcaller);
}

static base::subtle::AtomicWord
    g_SbrContentViewCore_onNativeSbrContentViewCoreDestroyed = 0;
static void Java_SbrContentViewCore_onNativeSbrContentViewCoreDestroyed(JNIEnv*
    env, jobject obj, jlong nativeContentViewCore) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "onNativeSbrContentViewCoreDestroyed",

"("
"J"
")"
"V",
      &g_SbrContentViewCore_onNativeSbrContentViewCoreDestroyed);

     env->CallVoidMethod(obj,
          method_id, nativeContentViewCore);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_onTabCrash = 0;
static void Java_SbrContentViewCore_onTabCrash(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "onTabCrash",

"("
")"
"V",
      &g_SbrContentViewCore_onTabCrash);

     env->CallVoidMethod(obj,
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_SbrContentViewCore_populateHardwareBitmapFinished = 0;
static void Java_SbrContentViewCore_populateHardwareBitmapFinished(JNIEnv* env,
    jobject obj, jobject hardwareBitmap,
    jboolean result) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "populateHardwareBitmapFinished",

"("
"Landroid/graphics/Bitmap;"
"Z"
")"
"V",
      &g_SbrContentViewCore_populateHardwareBitmapFinished);

     env->CallVoidMethod(obj,
          method_id, hardwareBitmap, result);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_SbrContentViewCore_populateSoftwareBitmapFinished = 0;
static void Java_SbrContentViewCore_populateSoftwareBitmapFinished(JNIEnv* env,
    jobject obj, jobject softwareBitmap,
    jboolean result) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "populateSoftwareBitmapFinished",

"("
"Landroid/graphics/Bitmap;"
"Z"
")"
"V",
      &g_SbrContentViewCore_populateSoftwareBitmapFinished);

     env->CallVoidMethod(obj,
          method_id, softwareBitmap, result);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_onFocusedNodeChanged = 0;
static void Java_SbrContentViewCore_onFocusedNodeChanged(JNIEnv* env, jobject
    obj, jboolean isEditableNode,
    jboolean isSelectNode,
    jlong nodeId) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "onFocusedNodeChanged",

"("
"Z"
"Z"
"J"
")"
"V",
      &g_SbrContentViewCore_onFocusedNodeChanged);

     env->CallVoidMethod(obj,
          method_id, isEditableNode, isSelectNode, nodeId);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_OnReceiveBitmapFromCache =
    0;
static void Java_SbrContentViewCore_OnReceiveBitmapFromCache(JNIEnv* env,
    jobject obj, jobject cachedBitmap) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "OnReceiveBitmapFromCache",

"("
"Landroid/graphics/Bitmap;"
")"
"V",
      &g_SbrContentViewCore_OnReceiveBitmapFromCache);

     env->CallVoidMethod(obj,
          method_id, cachedBitmap);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_notifyRotateStatus = 0;
static void Java_SbrContentViewCore_notifyRotateStatus(JNIEnv* env, jobject obj)
    {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "notifyRotateStatus",

"("
")"
"V",
      &g_SbrContentViewCore_notifyRotateStatus);

     env->CallVoidMethod(obj,
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_SbrContentViewCore_createMediaPlayerNotification = 0;
static void Java_SbrContentViewCore_createMediaPlayerNotification(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "createMediaPlayerNotification",

"("
")"
"V",
      &g_SbrContentViewCore_createMediaPlayerNotification);

     env->CallVoidMethod(obj,
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_savePageFileName = 0;
static void Java_SbrContentViewCore_savePageFileName(JNIEnv* env, jobject obj,
    jstring fileName) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "savePageFileName",

"("
"Ljava/lang/String;"
")"
"V",
      &g_SbrContentViewCore_savePageFileName);

     env->CallVoidMethod(obj,
          method_id, fileName);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_showAutoLoginFailureMsg =
    0;
static void Java_SbrContentViewCore_showAutoLoginFailureMsg(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "showAutoLoginFailureMsg",

"("
")"
"V",
      &g_SbrContentViewCore_showAutoLoginFailureMsg);

     env->CallVoidMethod(obj,
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_SbrContentViewCore_getTabDragAndDropIsInProgress = 0;
static jboolean Java_SbrContentViewCore_getTabDragAndDropIsInProgress(JNIEnv*
    env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz, false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "getTabDragAndDropIsInProgress",

"("
")"
"Z",
      &g_SbrContentViewCore_getTabDragAndDropIsInProgress);

  jboolean ret =
      env->CallBooleanMethod(obj,
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_SbrContentViewCore_resetVSyncNotification = 0;
static void Java_SbrContentViewCore_resetVSyncNotification(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "resetVSyncNotification",

"("
")"
"V",
      &g_SbrContentViewCore_resetVSyncNotification);

     env->CallVoidMethod(obj,
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_showSelectPopup = 0;
static void Java_SbrContentViewCore_showSelectPopup(JNIEnv* env, jobject obj,
    jobjectArray items,
    jintArray enabled,
    jboolean multiple,
    jintArray selectedIndices,
    jint advancedImeOptions) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "showSelectPopup",

"("
"[Ljava/lang/String;"
"[I"
"Z"
"[I"
"I"
")"
"V",
      &g_SbrContentViewCore_showSelectPopup);

     env->CallVoidMethod(obj,
          method_id, items, enabled, multiple, selectedIndices,
              advancedImeOptions);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_updateImeAdapter = 0;
static void Java_SbrContentViewCore_updateImeAdapter(JNIEnv* env, jobject obj,
    jint nativeImeAdapterAndroid,
    jint textInputType,
    jstring text,
    jint selectionStart,
    jint selectionEnd,
    jint compositionStart,
    jint compositionEnd,
    jboolean showImeIfNeeded,
    jboolean require_ack,
    jint advancedImeOptions) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "updateImeAdapter",

"("
"I"
"I"
"Ljava/lang/String;"
"I"
"I"
"I"
"I"
"Z"
"Z"
"I"
")"
"V",
      &g_SbrContentViewCore_updateImeAdapter);

     env->CallVoidMethod(obj,
          method_id, nativeImeAdapterAndroid, textInputType, text,
              selectionStart, selectionEnd, compositionStart, compositionEnd,
              showImeIfNeeded, require_ack, advancedImeOptions);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_selectPopupEmpty = 0;
static void Java_SbrContentViewCore_selectPopupEmpty(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "selectPopupEmpty",

"("
")"
"V",
      &g_SbrContentViewCore_selectPopupEmpty);

     env->CallVoidMethod(obj,
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_OnTextFieldBoundsChanged =
    0;
static void Java_SbrContentViewCore_OnTextFieldBoundsChanged(JNIEnv* env,
    jobject obj, jint left,
    jint top,
    jint right,
    jint bottom) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "OnTextFieldBoundsChanged",

"("
"I"
"I"
"I"
"I"
")"
"V",
      &g_SbrContentViewCore_OnTextFieldBoundsChanged);

     env->CallVoidMethod(obj,
          method_id, left, top, right, bottom);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_createRect = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_SbrContentViewCore_createRect(JNIEnv* env, jint x,
    jint y,
    jint right,
    jint bottom) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, g_SbrContentViewCore_clazz,
      g_SbrContentViewCore_clazz, NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_SbrContentViewCore_clazz,
      "createRect",

"("
"I"
"I"
"I"
"I"
")"
"Landroid/graphics/Rect;",
      &g_SbrContentViewCore_createRect);

  jobject ret =
      env->CallStaticObjectMethod(g_SbrContentViewCore_clazz,
          method_id, x, y, right, bottom);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_SbrContentViewCore_onSelectionBoundsChanged =
    0;
static void Java_SbrContentViewCore_onSelectionBoundsChanged(JNIEnv* env,
    jobject obj, jobject anchorRectDip,
    jint anchorDir,
    jobject focusRectDip,
    jint focusDir,
    jboolean isAnchorFirst,
    jobject selectionRect,
    jboolean isLastTouchPoint,
    jboolean isImage) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "onSelectionBoundsChanged",

"("
"Landroid/graphics/Rect;"
"I"
"Landroid/graphics/Rect;"
"I"
"Z"
"Landroid/graphics/Rect;"
"Z"
"Z"
")"
"V",
      &g_SbrContentViewCore_onSelectionBoundsChanged);

     env->CallVoidMethod(obj,
          method_id, anchorRectDip, anchorDir, focusRectDip, focusDir,
              isAnchorFirst, selectionRect, isLastTouchPoint, isImage);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_SelectedBitmap = 0;
static void Java_SbrContentViewCore_SelectedBitmap(JNIEnv* env, jobject obj,
    jobject bitmap) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "SelectedBitmap",

"("
"Landroid/graphics/Bitmap;"
")"
"V",
      &g_SbrContentViewCore_SelectedBitmap);

     env->CallVoidMethod(obj,
          method_id, bitmap);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_PointOnRegion = 0;
static void Java_SbrContentViewCore_PointOnRegion(JNIEnv* env, jobject obj,
    jboolean isOnRegion) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "PointOnRegion",

"("
"Z"
")"
"V",
      &g_SbrContentViewCore_PointOnRegion);

     env->CallVoidMethod(obj,
          method_id, isOnRegion);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_SelectedMarkup = 0;
static void Java_SbrContentViewCore_SelectedMarkup(JNIEnv* env, jobject obj,
    jstring markup) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "SelectedMarkup",

"("
"Ljava/lang/String;"
")"
"V",
      &g_SbrContentViewCore_SelectedMarkup);

     env->CallVoidMethod(obj,
          method_id, markup);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_setSelectionVisibilty = 0;
static void Java_SbrContentViewCore_setSelectionVisibilty(JNIEnv* env, jobject
    obj, jboolean isVisible) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "setSelectionVisibilty",

"("
"Z"
")"
"V",
      &g_SbrContentViewCore_setSelectionVisibilty);

     env->CallVoidMethod(obj,
          method_id, isVisible);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_updateCurrentSelectionRect
    = 0;
static void Java_SbrContentViewCore_updateCurrentSelectionRect(JNIEnv* env,
    jobject obj, jint x,
    jint y,
    jint width,
    jint height) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "updateCurrentSelectionRect",

"("
"I"
"I"
"I"
"I"
")"
"V",
      &g_SbrContentViewCore_updateCurrentSelectionRect);

     env->CallVoidMethod(obj,
          method_id, x, y, width, height);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_onSSRMModeCallback = 0;
static void Java_SbrContentViewCore_onSSRMModeCallback(JNIEnv* env, jobject obj,
    jint SSRMCaller,
    jint count) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "onSSRMModeCallback",

"("
"I"
"I"
")"
"V",
      &g_SbrContentViewCore_onSSRMModeCallback);

     env->CallVoidMethod(obj,
          method_id, SSRMCaller, count);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_getContentVideoViewClient =
    0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_SbrContentViewCore_getContentVideoViewClient(JNIEnv* env, jobject obj)
    {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz, NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "getContentVideoViewClient",

"("
")"
"Lorg/chromium/content/browser/ContentVideoViewClient;",
      &g_SbrContentViewCore_getContentVideoViewClient);

  jobject ret =
      env->CallObjectMethod(obj,
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_SbrContentViewCore_updateFrameInfo = 0;
static void Java_SbrContentViewCore_updateFrameInfo(JNIEnv* env, jobject obj,
    jfloat scrollOffsetX,
    jfloat scrollOffsetY,
    jfloat pageScaleFactor,
    jfloat minPageScaleFactor,
    jfloat maxPageScaleFactor,
    jfloat contentWidth,
    jfloat contentHeight,
    jfloat viewportWidth,
    jfloat viewportHeight,
    jfloat controlsOffsetYCss,
    jfloat contentOffsetYCss,
    jfloat overdrawBottomHeightCss) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "updateFrameInfo",

"("
"F"
"F"
"F"
"F"
"F"
"F"
"F"
"F"
"F"
"F"
"F"
"F"
")"
"V",
      &g_SbrContentViewCore_updateFrameInfo);

     env->CallVoidMethod(obj,
          method_id, scrollOffsetX, scrollOffsetY, pageScaleFactor,
              minPageScaleFactor, maxPageScaleFactor, contentWidth,
              contentHeight, viewportWidth, viewportHeight, controlsOffsetYCss,
              contentOffsetYCss, overdrawBottomHeightCss);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_onRenderProcessSwap = 0;
static void Java_SbrContentViewCore_onRenderProcessSwap(JNIEnv* env, jobject
    obj, jint oldPid,
    jint newPid) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "onRenderProcessSwap",

"("
"I"
"I"
")"
"V",
      &g_SbrContentViewCore_onRenderProcessSwap);

     env->CallVoidMethod(obj,
          method_id, oldPid, newPid);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_onRecognizeArticleResult =
    0;
static void Java_SbrContentViewCore_onRecognizeArticleResult(JNIEnv* env,
    jobject obj, jstring reader_result_str) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "onRecognizeArticleResult",

"("
"Ljava/lang/String;"
")"
"V",
      &g_SbrContentViewCore_onRecognizeArticleResult);

     env->CallVoidMethod(obj,
          method_id, reader_result_str);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_showDisambiguationPopup =
    0;
static void Java_SbrContentViewCore_showDisambiguationPopup(JNIEnv* env, jobject
    obj, jobject targetRect,
    jobject zoomedBitmap) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "showDisambiguationPopup",

"("
"Landroid/graphics/Rect;"
"Landroid/graphics/Bitmap;"
")"
"V",
      &g_SbrContentViewCore_showDisambiguationPopup);

     env->CallVoidMethod(obj,
          method_id, targetRect, zoomedBitmap);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_onOpenUrlInNewTab = 0;
static void Java_SbrContentViewCore_onOpenUrlInNewTab(JNIEnv* env, jobject obj,
    jstring mouseClickurl) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "onOpenUrlInNewTab",

"("
"Ljava/lang/String;"
")"
"V",
      &g_SbrContentViewCore_onOpenUrlInNewTab);

     env->CallVoidMethod(obj,
          method_id, mouseClickurl);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_setLongPressSelectionPoint
    = 0;
static void Java_SbrContentViewCore_setLongPressSelectionPoint(JNIEnv* env,
    jobject obj, jint x,
    jint y) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "setLongPressSelectionPoint",

"("
"I"
"I"
")"
"V",
      &g_SbrContentViewCore_setLongPressSelectionPoint);

     env->CallVoidMethod(obj,
          method_id, x, y);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_SbrContentViewCore_updateTouchedFixedElementHeight = 0;
static void Java_SbrContentViewCore_updateTouchedFixedElementHeight(JNIEnv* env,
    jobject obj, jint height) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "updateTouchedFixedElementHeight",

"("
"I"
")"
"V",
      &g_SbrContentViewCore_updateTouchedFixedElementHeight);

     env->CallVoidMethod(obj,
          method_id, height);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_onTouchEventConsumedByJS =
    0;
static void Java_SbrContentViewCore_onTouchEventConsumedByJS(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "onTouchEventConsumedByJS",

"("
")"
"V",
      &g_SbrContentViewCore_onTouchEventConsumedByJS);

     env->CallVoidMethod(obj,
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_onHoverHitTestResult = 0;
static void Java_SbrContentViewCore_onHoverHitTestResult(JNIEnv* env, jobject
    obj, jint contentType) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "onHoverHitTestResult",

"("
"I"
")"
"V",
      &g_SbrContentViewCore_onHoverHitTestResult);

     env->CallVoidMethod(obj,
          method_id, contentType);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_updateFocusedInputInfo = 0;
static void Java_SbrContentViewCore_updateFocusedInputInfo(JNIEnv* env, jobject
    obj, jobject focusedInputRect,
    jboolean isMultiLineInput,
    jboolean isContentRichlyEditable) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "updateFocusedInputInfo",

"("
"Landroid/graphics/Rect;"
"Z"
"Z"
")"
"V",
      &g_SbrContentViewCore_updateFocusedInputInfo);

     env->CallVoidMethod(obj,
          method_id, focusedInputRect, isMultiLineInput,
              isContentRichlyEditable);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_SbrContentViewCore_OnRendererInitializeComplete = 0;
static void Java_SbrContentViewCore_OnRendererInitializeComplete(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "OnRendererInitializeComplete",

"("
")"
"V",
      &g_SbrContentViewCore_OnRendererInitializeComplete);

     env->CallVoidMethod(obj,
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_OnUpdateEndOfPageState = 0;
static void Java_SbrContentViewCore_OnUpdateEndOfPageState(JNIEnv* env, jobject
    obj, jboolean eopStatus) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "OnUpdateEndOfPageState",

"("
"Z"
")"
"V",
      &g_SbrContentViewCore_OnUpdateEndOfPageState);

     env->CallVoidMethod(obj,
          method_id, eopStatus);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord
    g_SbrContentViewCore_selectedMarkupWithStartContentRect = 0;
static void Java_SbrContentViewCore_selectedMarkupWithStartContentRect(JNIEnv*
    env, jobject obj, jstring markup,
    jobject startSelectionContentRect) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "selectedMarkupWithStartContentRect",

"("
"Ljava/lang/String;"
"Landroid/graphics/Rect;"
")"
"V",
      &g_SbrContentViewCore_selectedMarkupWithStartContentRect);

     env->CallVoidMethod(obj,
          method_id, markup, startSelectionContentRect);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_ShowAudioFocusFailMessage =
    0;
static void Java_SbrContentViewCore_ShowAudioFocusFailMessage(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "ShowAudioFocusFailMessage",

"("
")"
"V",
      &g_SbrContentViewCore_ShowAudioFocusFailMessage);

     env->CallVoidMethod(obj,
          method_id);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_didEnableUIResourceLayer =
    0;
static void Java_SbrContentViewCore_didEnableUIResourceLayer(JNIEnv* env,
    jobject obj, jint layerType,
    jboolean composited,
    jboolean visible) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "didEnableUIResourceLayer",

"("
"I"
"Z"
"Z"
")"
"V",
      &g_SbrContentViewCore_didEnableUIResourceLayer);

     env->CallVoidMethod(obj,
          method_id, layerType, composited, visible);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_onScrollEnd = 0;
static void Java_SbrContentViewCore_onScrollEnd(JNIEnv* env, jobject obj,
    jboolean scrollIgnored) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "onScrollEnd",

"("
"Z"
")"
"V",
      &g_SbrContentViewCore_onScrollEnd);

     env->CallVoidMethod(obj,
          method_id, scrollIgnored);
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsSbrContentViewCore[] = {
    { "nativeSetUIResourceBitmap",
"("
"J"
"I"
"Landroid/graphics/Bitmap;"
")"
"V", reinterpret_cast<void*>(SetUIResourceBitmap) },
    { "nativeEnableUIResourceLayer",
"("
"J"
"I"
"Z"
")"
"V", reinterpret_cast<void*>(EnableUIResourceLayer) },
    { "nativeMoveUIResourceLayer",
"("
"J"
"I"
"F"
"F"
")"
"V", reinterpret_cast<void*>(MoveUIResourceLayer) },
    { "nativeHandleUIResourceLayerEvent",
"("
"J"
"F"
"F"
")"
"I", reinterpret_cast<void*>(HandleUIResourceLayerEvent) },
    { "nativeIsIncognito",
"("
"J"
")"
"Z", reinterpret_cast<void*>(IsIncognito) },
    { "nativeGetContentMimeType",
"("
"J"
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetContentMimeType) },
    { "nativeGetSelectionVisibilityStatus",
"("
"J"
")"
"V", reinterpret_cast<void*>(GetSelectionVisibilityStatus) },
    { "nativeCheckBelongToSelection",
"("
"J"
"I"
"I"
")"
"V", reinterpret_cast<void*>(CheckBelongToSelection) },
    { "nativeGetSelectionBitmap",
"("
"J"
")"
"V", reinterpret_cast<void*>(GetSelectionBitmap) },
    { "nativeselectClosestWord",
"("
"J"
"I"
"I"
")"
"V", reinterpret_cast<void*>(selectClosestWord) },
    { "nativeclearTextSelection",
"("
"J"
")"
"V", reinterpret_cast<void*>(clearTextSelection) },
    { "nativemoveFocusToNext",
"("
"J"
")"
"V", reinterpret_cast<void*>(moveFocusToNext) },
    { "nativemoveFocusToPrevious",
"("
"J"
")"
"V", reinterpret_cast<void*>(moveFocusToPrevious) },
    { "nativePerformLongPress",
"("
"J"
"J"
"F"
"F"
"Z"
")"
"V", reinterpret_cast<void*>(PerformLongPress) },
    { "nativeGetSelectionMarkup",
"("
"J"
")"
"V", reinterpret_cast<void*>(GetSelectionMarkup) },
    { "nativeSetPasswordEcho",
"("
"J"
"Z"
")"
"V", reinterpret_cast<void*>(SetPasswordEcho) },
    { "nativeperformLongClickOnFocussedNode",
"("
"J"
"J"
")"
"V", reinterpret_cast<void*>(performLongClickOnFocussedNode) },
    { "nativeInit",
"("
"J"
"J"
"J"
")"
"J", reinterpret_cast<void*>(Init) },
    { "nativePopulateHardwareBitmap",
"("
"J"
"I"
"I"
"I"
"I"
"Z"
")"
"V", reinterpret_cast<void*>(PopulateHardwareBitmap) },
    { "nativePopulateSoftwareBitmap",
"("
"J"
"I"
"I"
"I"
"I"
"F"
")"
"V", reinterpret_cast<void*>(PopulateSoftwareBitmap) },
    { "nativePopulateBitmapFromDelegatedLayerSync",
"("
"J"
"I"
"I"
"I"
"I"
"Landroid/graphics/Bitmap;"
")"
"Z", reinterpret_cast<void*>(PopulateBitmapFromDelegatedLayerSync) },
    { "nativeGetBitmapFromCompositor",
"("
"J"
"I"
"I"
"I"
"I"
"Landroid/graphics/Bitmap;"
"I"
")"
"Z", reinterpret_cast<void*>(GetBitmapFromCompositor) },
    { "nativeHandleSelectionDrop",
"("
"J"
"I"
"I"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(HandleSelectionDrop) },
    { "nativeLoadDataWithBaseUrl",
"("
"J"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(LoadDataWithBaseUrl) },
    { "nativeIsWMLPage",
"("
"J"
")"
"Z", reinterpret_cast<void*>(IsWMLPage) },
    { "nativeShowHoverFocus",
"("
"J"
"F"
"F"
"J"
"Z"
")"
"V", reinterpret_cast<void*>(ShowHoverFocus) },
    { "nativeSavePageAs",
"("
"J"
")"
"V", reinterpret_cast<void*>(SavePageAs) },
    { "nativeGetBitmapFromCachedResource",
"("
"J"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(GetBitmapFromCachedResource) },
    { "nativePopulateBitmapFromCompositor",
"("
"J"
"Landroid/graphics/Bitmap;"
")"
"Z", reinterpret_cast<void*>(PopulateBitmapFromCompositor) },
    { "nativeSetBackgroundColor",
"("
"J"
")"
"V", reinterpret_cast<void*>(SetBackgroundColor) },
    { "nativeRecognizeArticle",
"("
"J"
"I"
")"
"V", reinterpret_cast<void*>(RecognizeArticle) },
    { "nativeSbrScrollBy",
"("
"J"
"J"
"I"
"I"
"F"
"F"
")"
"V", reinterpret_cast<void*>(SbrScrollBy) },
    { "nativeHandleMouseClickWithCtrlkey",
"("
"J"
"I"
"I"
")"
"V", reinterpret_cast<void*>(HandleMouseClickWithCtrlkey) },
    { "nativeGetTouchedFixedElementHeight",
"("
"J"
"I"
"I"
")"
"V", reinterpret_cast<void*>(GetTouchedFixedElementHeight) },
    { "nativeHandleSelectionDropOnFocusedInput",
"("
"J"
"Ljava/lang/String;"
"I"
")"
"V", reinterpret_cast<void*>(HandleSelectionDropOnFocusedInput) },
    { "nativeGetFocusedInputInfo",
"("
"J"
")"
"V", reinterpret_cast<void*>(GetFocusedInputInfo) },
    { "nativeCrashed",
"("
"J"
")"
"Z", reinterpret_cast<void*>(Crashed) },
    { "nativeResetTabState",
"("
"J"
")"
"V", reinterpret_cast<void*>(ResetTabState) },
    { "nativeNeedsReload",
"("
"J"
")"
"Z", reinterpret_cast<void*>(NeedsReload) },
    { "nativeSetTopControlsHeight",
"("
"J"
"I"
")"
"V", reinterpret_cast<void*>(SetTopControlsHeight) },
    { "nativeSetScrollType",
"("
"J"
"I"
")"
"V", reinterpret_cast<void*>(SetScrollType) },
    { "nativeGetSelectionMarkupWithBounds",
"("
"J"
")"
"V", reinterpret_cast<void*>(GetSelectionMarkupWithBounds) },
    { "nativeDestroyIncognitoProfile",
"("
")"
"V", reinterpret_cast<void*>(DestroyIncognitoProfile) },
    { "nativeSelectBetweenCoordinates",
"("
"J"
"F"
"F"
"F"
"F"
"Z"
"Z"
")"
"V", reinterpret_cast<void*>(SelectBetweenCoordinates) },
    { "nativeIsPlayerEmpty",
"("
"J"
")"
"Z", reinterpret_cast<void*>(IsPlayerEmpty) },
    { "nativeOnPauseVideo",
"("
"J"
")"
"V", reinterpret_cast<void*>(OnPauseVideo) },
    { "nativeIsAnyVideoPlaying",
"("
"J"
")"
"Z", reinterpret_cast<void*>(IsAnyVideoPlaying) },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  g_SbrContentViewCore_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kSbrContentViewCoreClassPath).obj()));

  const int kMethodsSbrContentViewCoreSize =
      arraysize(kMethodsSbrContentViewCore);

  if (env->RegisterNatives(g_SbrContentViewCore_clazz,
                           kMethodsSbrContentViewCore,
                           kMethodsSbrContentViewCoreSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, g_SbrContentViewCore_clazz, __FILE__);
    return false;
  }

  return true;
}

}  // namespace content

#endif  // com_sec_chromium_content_browser_SbrContentViewCore_JNI
