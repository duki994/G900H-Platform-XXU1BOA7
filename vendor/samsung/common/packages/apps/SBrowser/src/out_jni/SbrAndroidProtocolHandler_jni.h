// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/sec/chromium/content/browser/SbrAndroidProtocolHandler

#ifndef com_sec_chromium_content_browser_SbrAndroidProtocolHandler_JNI
#define com_sec_chromium_content_browser_SbrAndroidProtocolHandler_JNI

#include <jni.h>

#include "base/android/jni_generator/jni_generator_helper.h"

// Step 1: forward declarations.
namespace {
const char kSbrAndroidProtocolHandlerClassPath[] =
    "com/sec/chromium/content/browser/SbrAndroidProtocolHandler";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SbrAndroidProtocolHandler_clazz = NULL;

}  // namespace

namespace content {

static void SetResourceContextForTesting(JNIEnv* env, jclass jcaller,
    jobject context);

static jstring GetAndroidAssetPath(JNIEnv* env, jclass jcaller);

static jstring GetAndroidResourcePath(JNIEnv* env, jclass jcaller);

// Step 2: method stubs.

static base::subtle::AtomicWord g_SbrAndroidProtocolHandler_open = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_SbrAndroidProtocolHandler_open(JNIEnv* env, jobject context,
    jstring url) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, g_SbrAndroidProtocolHandler_clazz,
      g_SbrAndroidProtocolHandler_clazz, NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_SbrAndroidProtocolHandler_clazz,
      "open",

"("
"Landroid/content/Context;"
"Ljava/lang/String;"
")"
"Ljava/io/InputStream;",
      &g_SbrAndroidProtocolHandler_open);

  jobject ret =
      env->CallStaticObjectMethod(g_SbrAndroidProtocolHandler_clazz,
          method_id, context, url);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_SbrAndroidProtocolHandler_getMimeType = 0;
static base::android::ScopedJavaLocalRef<jstring>
    Java_SbrAndroidProtocolHandler_getMimeType(JNIEnv* env, jobject context,
    jobject stream,
    jstring url) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, g_SbrAndroidProtocolHandler_clazz,
      g_SbrAndroidProtocolHandler_clazz, NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_SbrAndroidProtocolHandler_clazz,
      "getMimeType",

"("
"Landroid/content/Context;"
"Ljava/io/InputStream;"
"Ljava/lang/String;"
")"
"Ljava/lang/String;",
      &g_SbrAndroidProtocolHandler_getMimeType);

  jstring ret =
static_cast<jstring>(env->CallStaticObjectMethod(g_SbrAndroidProtocolHandler_clazz,
          method_id, context, stream, url));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

// Step 3: RegisterNatives.

static const JNINativeMethod kMethodsSbrAndroidProtocolHandler[] = {
    { "nativeSetResourceContextForTesting",
"("
"Landroid/content/Context;"
")"
"V", reinterpret_cast<void*>(SetResourceContextForTesting) },
    { "nativeGetAndroidAssetPath",
"("
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetAndroidAssetPath) },
    { "nativeGetAndroidResourcePath",
"("
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetAndroidResourcePath) },
};

static bool RegisterNativesImpl(JNIEnv* env) {
  g_SbrAndroidProtocolHandler_clazz =
      reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kSbrAndroidProtocolHandlerClassPath).obj()));

  const int kMethodsSbrAndroidProtocolHandlerSize =
      arraysize(kMethodsSbrAndroidProtocolHandler);

  if (env->RegisterNatives(g_SbrAndroidProtocolHandler_clazz,
                           kMethodsSbrAndroidProtocolHandler,
                           kMethodsSbrAndroidProtocolHandlerSize) < 0) {
    jni_generator::HandleRegistrationError(
        env, g_SbrAndroidProtocolHandler_clazz, __FILE__);
    return false;
  }

  return true;
}

}  // namespace content

#endif  // com_sec_chromium_content_browser_SbrAndroidProtocolHandler_JNI
