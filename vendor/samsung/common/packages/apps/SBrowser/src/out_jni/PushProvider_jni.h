// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/sec/chromium/content/browser/PushProvider

#ifndef com_sec_chromium_content_browser_PushProvider_JNI
#define com_sec_chromium_content_browser_PushProvider_JNI

#include <jni.h>

#include "base/android/jni_generator/jni_generator_helper.h"

// Step 1: forward declarations.
namespace {
const char kPushProviderClassPath[] =
    "com/sec/chromium/content/browser/PushProvider";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_PushProvider_clazz = NULL;

}  // namespace

namespace content {

// Step 2: method stubs.

static base::subtle::AtomicWord g_PushProvider_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_PushProvider_create(JNIEnv* env, jlong nativePushProviderAndroid) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, g_PushProvider_clazz,
      g_PushProvider_clazz, NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_PushProvider_clazz,
      "create",

"("
"J"
")"
"Lcom/sec/chromium/content/browser/PushProvider;",
      &g_PushProvider_create);

  jobject ret =
      env->CallStaticObjectMethod(g_PushProvider_clazz,
          method_id, nativePushProviderAndroid);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_PushProvider_register = 0;
static void Java_PushProvider_register(JNIEnv* env, jobject obj, jobject
    context,
    jstring origin,
    jlong requestId) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_PushProvider_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_PushProvider_clazz,
      "register",

"("
"Landroid/content/Context;"
"Ljava/lang/String;"
"J"
")"
"V",
      &g_PushProvider_register);

     env->CallVoidMethod(obj,
          method_id, context, origin, requestId);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_PushProvider_unregister = 0;
static void Java_PushProvider_unregister(JNIEnv* env, jobject obj, jobject
    context,
    jstring origin,
    jlong requestId) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_PushProvider_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_PushProvider_clazz,
      "unregister",

"("
"Landroid/content/Context;"
"Ljava/lang/String;"
"J"
")"
"V",
      &g_PushProvider_unregister);

     env->CallVoidMethod(obj,
          method_id, context, origin, requestId);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_PushProvider_isRegistered = 0;
static jboolean Java_PushProvider_isRegistered(JNIEnv* env, jobject obj, jobject
    context,
    jstring origin) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_PushProvider_clazz, false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_PushProvider_clazz,
      "isRegistered",

"("
"Landroid/content/Context;"
"Ljava/lang/String;"
")"
"Z",
      &g_PushProvider_isRegistered);

  jboolean ret =
      env->CallBooleanMethod(obj,
          method_id, context, origin);
  jni_generator::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {
  g_PushProvider_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kPushProviderClassPath).obj()));

  return true;
}

}  // namespace content

#endif  // com_sec_chromium_content_browser_PushProvider_JNI
