// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/sec/chromium/ui/base/SbrClipboard

#ifndef com_sec_chromium_ui_base_SbrClipboard_JNI
#define com_sec_chromium_ui_base_SbrClipboard_JNI

#include <jni.h>

#include "base/android/jni_generator/jni_generator_helper.h"

// Step 1: forward declarations.
namespace {
const char kSbrClipboardClassPath[] = "com/sec/chromium/ui/base/SbrClipboard";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SbrClipboard_clazz = NULL;

}  // namespace

namespace ui {

// Step 2: method stubs.

static base::subtle::AtomicWord g_SbrClipboard_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_SbrClipboard_create(JNIEnv* env, jobject context) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, g_SbrClipboard_clazz,
      g_SbrClipboard_clazz, NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_SbrClipboard_clazz,
      "create",

"("
"Landroid/content/Context;"
")"
"Lcom/sec/chromium/ui/base/SbrClipboard;",
      &g_SbrClipboard_create);

  jobject ret =
      env->CallStaticObjectMethod(g_SbrClipboard_clazz,
          method_id, context);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_SbrClipboard_getCoercedText = 0;
static base::android::ScopedJavaLocalRef<jstring>
    Java_SbrClipboard_getCoercedText(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrClipboard_clazz, NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrClipboard_clazz,
      "getCoercedText",

"("
")"
"Ljava/lang/String;",
      &g_SbrClipboard_getCoercedText);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj,
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_SbrClipboard_setText = 0;
static void Java_SbrClipboard_setText(JNIEnv* env, jobject obj, jstring text) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrClipboard_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrClipboard_clazz,
      "setText",

"("
"Ljava/lang/String;"
")"
"V",
      &g_SbrClipboard_setText);

     env->CallVoidMethod(obj,
          method_id, text);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SbrClipboard_setHTML = 0;
static void Java_SbrClipboard_setHTML(JNIEnv* env, jobject obj, jstring charSeq)
    {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrClipboard_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrClipboard_clazz,
      "setHTML",

"("
"Ljava/lang/String;"
")"
"V",
      &g_SbrClipboard_setHTML);

     env->CallVoidMethod(obj,
          method_id, charSeq);
  jni_generator::CheckException(env);

}

static base::subtle::AtomicWord g_SbrClipboard_getHTMLText = 0;
static base::android::ScopedJavaLocalRef<jstring>
    Java_SbrClipboard_getHTMLText(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, obj,
      g_SbrClipboard_clazz, NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrClipboard_clazz,
      "getHTMLText",

"("
")"
"Ljava/lang/String;",
      &g_SbrClipboard_getHTMLText);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj,
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_SbrClipboard_isHTMLClipboardSupported = 0;
static jboolean Java_SbrClipboard_isHTMLClipboardSupported(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, g_SbrClipboard_clazz,
      g_SbrClipboard_clazz, false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_SbrClipboard_clazz,
      "isHTMLClipboardSupported",

"("
")"
"Z",
      &g_SbrClipboard_isHTMLClipboardSupported);

  jboolean ret =
      env->CallStaticBooleanMethod(g_SbrClipboard_clazz,
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {
  g_SbrClipboard_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kSbrClipboardClassPath).obj()));

  return true;
}

}  // namespace ui

#endif  // com_sec_chromium_ui_base_SbrClipboard_JNI
