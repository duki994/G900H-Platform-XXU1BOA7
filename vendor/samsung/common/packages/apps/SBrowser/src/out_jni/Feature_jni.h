// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/sec/android/app/sbrowser/base/Feature

#ifndef com_sec_android_app_sbrowser_base_Feature_JNI
#define com_sec_android_app_sbrowser_base_Feature_JNI

#include <jni.h>

#include "base/android/jni_generator/jni_generator_helper.h"

// Step 1: forward declarations.
namespace {
const char kFeatureClassPath[] = "com/sec/android/app/sbrowser/base/Feature";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_Feature_clazz = NULL;

}  // namespace

// Step 2: method stubs.

static base::subtle::AtomicWord g_Feature_getString = 0;
static base::android::ScopedJavaLocalRef<jstring> Java_Feature_getString(JNIEnv*
    env, jstring cscString) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, g_Feature_clazz,
      g_Feature_clazz, NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_Feature_clazz,
      "getString",

"("
"Ljava/lang/String;"
")"
"Ljava/lang/String;",
      &g_Feature_getString);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(g_Feature_clazz,
          method_id, cscString));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_Feature_getEnableStatus = 0;
static jboolean Java_Feature_getEnableStatus(JNIEnv* env, jstring cscString) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, g_Feature_clazz,
      g_Feature_clazz, false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_Feature_clazz,
      "getEnableStatus",

"("
"Ljava/lang/String;"
")"
"Z",
      &g_Feature_getEnableStatus);

  jboolean ret =
      env->CallStaticBooleanMethod(g_Feature_clazz,
          method_id, cscString);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_Feature_InitCSCFeature = 0;
static void Java_Feature_InitCSCFeature(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  CHECK_CLAZZ(env, g_Feature_clazz,
      g_Feature_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_Feature_clazz,
      "InitCSCFeature",

"("
")"
"V",
      &g_Feature_InitCSCFeature);

     env->CallStaticVoidMethod(g_Feature_clazz,
          method_id);
  jni_generator::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {
  g_Feature_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kFeatureClassPath).obj()));

  return true;
}

#endif  // com_sec_android_app_sbrowser_base_Feature_JNI
