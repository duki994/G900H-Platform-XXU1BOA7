From e144ea2749d880e707977c62b0a958e544603f86 Mon Sep 17 00:00:00 2001
From: Andrew Hsieh <andrewhsieh@google.com>
Date: Sun, 22 Sep 2013 12:18:46 +0800
Subject: [PATCH 1/3] Compile against llvm-3.3

instead of against LLVM trunk@187732

Change-Id: Ibe45c9100421a2b937219fa7c9d69be59014379f
---
 include/mcld/Support/raw_ostream.h |  3 ++-
 lib/CodeGen/MCLDTargetMachine.cpp  |  6 ++---
 lib/Support/ToolOutputFile.cpp     |  5 ++--
 lib/Support/Windows/PathV3.inc     |  1 +
 lib/Support/raw_ostream.cpp        |  2 +-
 lib/Target/Mips/MipsELFDynamic.cpp | 48 +++++++++++++++++++++++++++-----------
 6 files changed, 44 insertions(+), 21 deletions(-)

diff --git a/include/mcld/Support/raw_ostream.h b/include/mcld/Support/raw_ostream.h
index 0e2cc40..ee063fa 100644
--- a/include/mcld/Support/raw_ostream.h
+++ b/include/mcld/Support/raw_ostream.h
@@ -13,6 +13,7 @@
 #endif
 #include <string>
 #include <llvm/Support/raw_ostream.h>
+#include <llvm/Support/FileSystem.h>
 
 namespace mcld {
 
@@ -31,7 +32,7 @@ public:
   /// output errors).
   raw_fd_ostream(const char *pFilename,
                  std::string &pErrorInfo,
-                 llvm::sys::fs::OpenFlags pFlags = llvm::sys::fs::F_None);
+                 unsigned pFlags = 0);
 
   /// raw_fd_ostream ctor - FD is the file descriptor that this writes to.  If
   /// ShouldClose is true, this closes the file when the stream is destroyed.
diff --git a/lib/CodeGen/MCLDTargetMachine.cpp b/lib/CodeGen/MCLDTargetMachine.cpp
index 964a5be..03bdfa3 100644
--- a/lib/CodeGen/MCLDTargetMachine.cpp
+++ b/lib/CodeGen/MCLDTargetMachine.cpp
@@ -125,7 +125,7 @@ static void addPassesToHandleExceptions(llvm::TargetMachine *TM,
     // removed from the parent invoke(s). This could happen when a landing
     // pad is shared by multiple invokes and is also a target of a normal
     // edge from elsewhere.
-    PM.add(createSjLjEHPreparePass(TM));
+    PM.add(createSjLjEHPreparePass(TM->getTargetLowering()));
     // FALLTHROUGH
   case llvm::ExceptionHandling::DwarfCFI:
   case llvm::ExceptionHandling::ARM:
@@ -133,7 +133,7 @@ static void addPassesToHandleExceptions(llvm::TargetMachine *TM,
     PM.add(createDwarfEHPass(TM));
     break;
   case llvm::ExceptionHandling::None:
-    PM.add(createLowerInvokePass(TM));
+    PM.add(createLowerInvokePass(TM->getTargetLowering()));
 
     // The lower invoke pass may create unreachable code. Remove it.
     PM.add(createUnreachableBlockEliminationPass());
@@ -288,7 +288,7 @@ bool mcld::MCLDTargetMachine::addCompilerPasses(PassManagerBase &pPM,
   MCInstPrinter *InstPrinter =
     m_pLLVMTarget->createMCInstPrinter(MAI.getAssemblerDialect(), MAI,
                                            MII,
-                                           *Context->getRegisterInfo(), STI);
+                                           Context->getRegisterInfo(), STI);
 
   MCCodeEmitter* MCE = 0;
   MCAsmBackend *MAB = 0;
diff --git a/lib/Support/ToolOutputFile.cpp b/lib/Support/ToolOutputFile.cpp
index 2b97f25..70ee997 100644
--- a/lib/Support/ToolOutputFile.cpp
+++ b/lib/Support/ToolOutputFile.cpp
@@ -18,6 +18,7 @@
 
 #include <llvm/Support/Signals.h>
 #include <llvm/Support/Path.h>
+#include <llvm/Support/FileSystem.h>
 #include <llvm/Support/FormattedStream.h>
 
 using namespace mcld;
@@ -29,7 +30,7 @@ ToolOutputFile::CleanupInstaller::CleanupInstaller(const sys::fs::Path& pPath)
   : Keep(false), m_Path(pPath) {
   // Arrange for the file to be deleted if the process is killed.
   if ("-" != m_Path.native())
-    llvm::sys::RemoveFileOnSignal(m_Path.native());
+       llvm::sys::RemoveFileOnSignal(llvm::sys::Path(m_Path.native()));
 }
 
 ToolOutputFile::CleanupInstaller::~CleanupInstaller()
@@ -45,7 +46,7 @@ ToolOutputFile::CleanupInstaller::~CleanupInstaller()
   // Ok, the file is successfully written and closed, or deleted. There's no
   // further need to clean it up on signals.
   if ("_" != m_Path.native())
-    llvm::sys::DontRemoveFileOnSignal(m_Path.native());
+    llvm::sys::DontRemoveFileOnSignal(llvm::sys::Path(m_Path.native()));
 }
 
 //===----------------------------------------------------------------------===//
diff --git a/lib/Support/Windows/PathV3.inc b/lib/Support/Windows/PathV3.inc
index 2f36c93..02a400a 100644
--- a/lib/Support/Windows/PathV3.inc
+++ b/lib/Support/Windows/PathV3.inc
@@ -7,6 +7,7 @@
 //
 //===----------------------------------------------------------------------===//
 #include <mcld/Support/Path.h>
+#include <llvm/Support/ErrorHandling.h>
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <stack>
diff --git a/lib/Support/raw_ostream.cpp b/lib/Support/raw_ostream.cpp
index 32e362a..34e37ef 100644
--- a/lib/Support/raw_ostream.cpp
+++ b/lib/Support/raw_ostream.cpp
@@ -37,7 +37,7 @@ using namespace mcld;
 //===----------------------------------------------------------------------===//
 mcld::raw_fd_ostream::raw_fd_ostream(const char *pFilename,
                                      std::string &pErrorInfo,
-                                     llvm::sys::fs::OpenFlags pFlags)
+                                     unsigned pFlags)
   : llvm::raw_fd_ostream(pFilename, pErrorInfo, pFlags),
     m_bConfigColor(false),
     m_bSetColor(false) {
diff --git a/lib/Target/Mips/MipsELFDynamic.cpp b/lib/Target/Mips/MipsELFDynamic.cpp
index b532b03..c0822b5 100644
--- a/lib/Target/Mips/MipsELFDynamic.cpp
+++ b/lib/Target/Mips/MipsELFDynamic.cpp
@@ -17,6 +17,26 @@
 
 using namespace mcld;
 
+
+// MIPS mandatory dynamic section entries
+enum {
+  DT_MIPS_RLD_VERSION  = 0x70000001,
+  DT_MIPS_FLAGS        = 0x70000005,
+  DT_MIPS_BASE_ADDRESS = 0x70000006,
+  DT_MIPS_LOCAL_GOTNO  = 0x7000000a,
+  DT_MIPS_SYMTABNO     = 0x70000011,
+  DT_MIPS_GOTSYM       = 0x70000013,
+  DT_MIPS_PLTGOT       = 0x70000032,
+};
+
+// Dynamic section MIPS flags
+enum {
+  RHF_NONE                   = 0x00000000,  // None
+  RHF_QUICKSTART             = 0x00000001,  // Use shortcut pointers
+  RHF_NOTPOT                 = 0x00000002,  // Hash size not power of two
+  RHF_NO_LIBRARY_REPLACEMENT = 0x00000004   // Ignore LD_LIBRARY_PATH
+};
+
 MipsELFDynamic::MipsELFDynamic(const MipsGNULDBackend& pParent,
                                const LinkerConfig& pConfig)
   : ELFDynamic(pParent, pConfig),
@@ -30,15 +50,15 @@ void MipsELFDynamic::reserveTargetEntries(const ELFFileFormat& pFormat)
   if (pFormat.hasGOT())
     reserveOne(llvm::ELF::DT_PLTGOT);
 
-  reserveOne(llvm::ELF::DT_MIPS_RLD_VERSION);
-  reserveOne(llvm::ELF::DT_MIPS_FLAGS);
-  reserveOne(llvm::ELF::DT_MIPS_BASE_ADDRESS);
-  reserveOne(llvm::ELF::DT_MIPS_LOCAL_GOTNO);
-  reserveOne(llvm::ELF::DT_MIPS_SYMTABNO);
-  reserveOne(llvm::ELF::DT_MIPS_GOTSYM);
+  reserveOne(DT_MIPS_RLD_VERSION);
+  reserveOne(DT_MIPS_FLAGS);
+  reserveOne(DT_MIPS_BASE_ADDRESS);
+  reserveOne(DT_MIPS_LOCAL_GOTNO);
+  reserveOne(DT_MIPS_SYMTABNO);
+  reserveOne(DT_MIPS_GOTSYM);
 
   if (pFormat.hasGOTPLT())
-    reserveOne(llvm::ELF::DT_MIPS_PLTGOT);
+    reserveOne(DT_MIPS_PLTGOT);
 }
 
 void MipsELFDynamic::applyTargetEntries(const ELFFileFormat& pFormat)
@@ -46,15 +66,15 @@ void MipsELFDynamic::applyTargetEntries(const ELFFileFormat& pFormat)
   if (pFormat.hasGOT())
     applyOne(llvm::ELF::DT_PLTGOT, pFormat.getGOT().addr());
 
-  applyOne(llvm::ELF::DT_MIPS_RLD_VERSION, 1);
-  applyOne(llvm::ELF::DT_MIPS_FLAGS, llvm::ELF::RHF_NOTPOT);
-  applyOne(llvm::ELF::DT_MIPS_BASE_ADDRESS, getBaseAddress());
-  applyOne(llvm::ELF::DT_MIPS_LOCAL_GOTNO, getLocalGotNum(pFormat));
-  applyOne(llvm::ELF::DT_MIPS_SYMTABNO, getSymTabNum(pFormat));
-  applyOne(llvm::ELF::DT_MIPS_GOTSYM, getGotSym(pFormat));
+  applyOne(DT_MIPS_RLD_VERSION, 1);
+  applyOne(DT_MIPS_FLAGS, RHF_NOTPOT);
+  applyOne(DT_MIPS_BASE_ADDRESS, getBaseAddress());
+  applyOne(DT_MIPS_LOCAL_GOTNO, getLocalGotNum(pFormat));
+  applyOne(DT_MIPS_SYMTABNO, getSymTabNum(pFormat));
+  applyOne(DT_MIPS_GOTSYM, getGotSym(pFormat));
 
   if (pFormat.hasGOTPLT())
-    applyOne(llvm::ELF::DT_MIPS_PLTGOT, pFormat.getGOTPLT().addr());
+    applyOne(DT_MIPS_PLTGOT, pFormat.getGOTPLT().addr());
 }
 
 size_t MipsELFDynamic::getSymTabNum(const ELFFileFormat& pFormat) const
-- 
1.8.4

