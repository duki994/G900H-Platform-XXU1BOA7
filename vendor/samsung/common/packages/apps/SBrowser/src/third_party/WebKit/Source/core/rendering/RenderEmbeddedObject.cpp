/*
 * Copyright (C) 1999 Lars Knoll (knoll@kde.org)
 *           (C) 2000 Simon Hausmann <hausmann@kde.org>
 *           (C) 2000 Stefan Schimanski (1Stein@gmx.de)
 * Copyright (C) 2004, 2005, 2006, 2008, 2009, 2010 Apple Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public License
 * along with this library; see the file COPYING.LIB.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301, USA.
 *
 */

#include "config.h"
#include "core/rendering/RenderEmbeddedObject.h"

#include "CSSValueKeywords.h"
#include "HTMLNames.h"
#include "core/html/HTMLIFrameElement.h"
#include "core/frame/Frame.h"
#include "core/page/Page.h"
#include "core/frame/Settings.h"
#include "core/plugins/PluginView.h"
#include "core/rendering/LayoutRectRecorder.h"
#include "core/rendering/PaintInfo.h"
#include "core/rendering/RenderTheme.h"
#include "core/rendering/RenderView.h"
#include "platform/fonts/Font.h"
#include "platform/fonts/FontSelector.h"
#include "platform/graphics/BitmapImage.h"
#include "platform/graphics/GraphicsContextStateSaver.h"
#include "platform/graphics/Path.h"
#include "platform/text/PlatformLocale.h"
#include "platform/text/TextRun.h"

namespace WebCore {

using namespace HTMLNames;

static const float replacementTextRoundedRectHeight = 18;
static const float replacementTextRoundedRectLeftRightTextMargin = 6;
static const float replacementTextRoundedRectOpacity = 0.20f;
static const float replacementTextRoundedRectRadius = 5;
static const float replacementTextTextOpacity = 0.55f;

static PassRefPtr<Image> loadDefaultMissingPlugin()
{
    static const unsigned char defaultMissingPluginData[] = {
    0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52,
    0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x08, 0x06, 0x00, 0x00, 0x00, 0x73, 0x7A, 0x7A,
    0xF4, 0x00, 0x00, 0x00, 0x01, 0x73, 0x52, 0x47, 0x42, 0x00, 0xAE, 0xCE, 0x1C, 0xE9, 0x00, 0x00,
    0x00, 0x04, 0x67, 0x41, 0x4D, 0x41, 0x00, 0x00, 0xB1, 0x8F, 0x0B, 0xFC, 0x61, 0x05, 0x00, 0x00,
    0x00, 0x20, 0x63, 0x48, 0x52, 0x4D, 0x00, 0x00, 0x7A, 0x26, 0x00, 0x00, 0x80, 0x84, 0x00, 0x00,
    0xFA, 0x00, 0x00, 0x00, 0x80, 0xE8, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0xEA, 0x60, 0x00, 0x00,
    0x3A, 0x98, 0x00, 0x00, 0x17, 0x70, 0x9C, 0xBA, 0x51, 0x3C, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48,
    0x59, 0x73, 0x00, 0x00, 0x0B, 0x12, 0x00, 0x00, 0x0B, 0x12, 0x01, 0xD2, 0xDD, 0x7E, 0xFC, 0x00,
    0x00, 0x00, 0x18, 0x74, 0x45, 0x58, 0x74, 0x53, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x00,
    0x50, 0x61, 0x69, 0x6E, 0x74, 0x2E, 0x4E, 0x45, 0x54, 0x20, 0x76, 0x32, 0x2E, 0x37, 0x32, 0x72,
    0x5A, 0x84, 0x5D, 0x00, 0x00, 0x04, 0x4B, 0x49, 0x44, 0x41, 0x54, 0x58, 0x47, 0xD5, 0x56, 0x7F,
    0x4C, 0x53, 0x57, 0x14, 0x56, 0xD0, 0x3A, 0xD1, 0xC9, 0x04, 0xEB, 0x20, 0x99, 0xC6, 0x44, 0x24,
    0x4B, 0x10, 0x88, 0x22, 0xFC, 0x63, 0x9C, 0x66, 0xDB, 0x1F, 0x3A, 0x26, 0x81, 0x08, 0x71, 0x33,
    0x71, 0xC3, 0x85, 0x2C, 0x51, 0x89, 0x12, 0x7F, 0x44, 0x1C, 0x8B, 0x2E, 0x18, 0x25, 0x63, 0xC0,
    0x26, 0x1B, 0x53, 0x04, 0x47, 0x86, 0x33, 0xC6, 0x21, 0x1B, 0x36, 0x51, 0x66, 0x87, 0xAE, 0x88,
    0x08, 0x5A, 0xAD, 0x22, 0x2A, 0x96, 0x96, 0xA0, 0x82, 0x50, 0x28, 0x45, 0x8A, 0x0C, 0xED, 0x8F,
    0x71, 0xD6, 0xEF, 0xC2, 0x23, 0x8F, 0xF6, 0xF1, 0x78, 0x0F, 0x5C, 0x32, 0x4F, 0x72, 0x72, 0xEF,
    0x3B, 0xF7, 0xDC, 0xF3, 0x7D, 0xF7, 0x9C, 0x73, 0x6F, 0x3B, 0x69, 0xD2, 0xAB, 0x28, 0xDE, 0x2E,
    0x89, 0x89, 0x4B, 0xD8, 0x50, 0x7A, 0xEE, 0xD2, 0x35, 0x68, 0x6C, 0xFC, 0x47, 0x1B, 0x61, 0xFB,
    0xCF, 0xCF, 0xE2, 0xE7, 0x3F, 0x47, 0xB9, 0x65, 0xFB, 0xAE, 0xB4, 0x9A, 0xDB, 0x8D, 0xED, 0xA6,
    0xEE, 0x7E, 0x7A, 0x61, 0x77, 0x32, 0xED, 0x78, 0xDA, 0x4F, 0xB0, 0x61, 0x0D, 0x3E, 0x2F, 0x9D,
    0x48, 0xF8, 0x92, 0x88, 0xA8, 0xAC, 0xDC, 0xFC, 0xE2, 0xC6, 0x96, 0x2E, 0x9B, 0xA5, 0xF7, 0x05,
    0xF5, 0x3D, 0x77, 0x90, 0xBB, 0xC0, 0x86, 0x35, 0xF8, 0xC0, 0x17, 0x7B, 0x26, 0x44, 0x04, 0x29,
    0x45, 0x6A, 0x91, 0xE2, 0x56, 0x73, 0x1F, 0xF5, 0xF6, 0xDB, 0x69, 0x60, 0x60, 0x10, 0x36, 0x4F,
    0x75, 0x97, 0xEA, 0x9B, 0x2D, 0xC3, 0x1C, 0x30, 0x87, 0x0D, 0x02, 0x1F, 0xF8, 0x62, 0xCF, 0xB8,
    0xCA, 0x83, 0x14, 0x26, 0xA7, 0xEC, 0x4E, 0xBB, 0x7C, 0x53, 0x6F, 0x32, 0xF7, 0x3C, 0x27, 0x9B,
    0x2B, 0xC5, 0x7C, 0xC1, 0x49, 0xCB, 0xAA, 0x9B, 0x29, 0xF1, 0x9B, 0xBF, 0x46, 0x28, 0x6C, 0xCF,
    0x5C, 0xC0, 0x7C, 0xC1, 0x5E, 0xC4, 0xA8, 0xBC, 0xA1, 0x37, 0x21, 0xA6, 0x68, 0x79, 0x96, 0x46,
    0x2C, 0x8B, 0xFA, 0xFE, 0x48, 0x61, 0x71, 0x6B, 0x47, 0x8F, 0x0D, 0x27, 0x38, 0x51, 0xD1, 0x48,
    0xBF, 0x5F, 0x69, 0xA6, 0xA6, 0x36, 0x2B, 0x39, 0x9C, 0x03, 0x6C, 0xC4, 0x77, 0x9E, 0xEA, 0x1E,
    0xD5, 0xDC, 0xEF, 0x60, 0xF3, 0xC2, 0xF2, 0x06, 0xA6, 0x98, 0xC3, 0xF6, 0x6D, 0xE9, 0x1D, 0x3A,
    0xAD, 0x31, 0x52, 0x63, 0x6B, 0x0F, 0xD9, 0x9D, 0xFF, 0xB0, 0x11, 0xDF, 0xC7, 0xFF, 0x68, 0x18,
    0xCC, 0x8A, 0x2B, 0x36, 0x30, 0x80, 0xE5, 0x51, 0x9E, 0xC8, 0xD4, 0x93, 0x5A, 0x55, 0x55, 0x9D,
    0x11, 0xAC, 0x91, 0x46, 0x04, 0x4B, 0x38, 0xA0, 0xF6, 0xD0, 0x94, 0x23, 0x57, 0x49, 0x67, 0x30,
    0x53, 0x9B, 0xE5, 0x6F, 0x96, 0x1D, 0x28, 0xE6, 0xB0, 0x6D, 0xCE, 0xAD, 0xA2, 0x35, 0x5F, 0x9C,
    0xF7, 0xD0, 0x43, 0xA7, 0x74, 0x2C, 0x26, 0x7C, 0x55, 0x17, 0xB5, 0x86, 0x45, 0xB1, 0x07, 0xAB,
    0x3D, 0x08, 0x84, 0x67, 0x5D, 0xA7, 0xB0, 0xCC, 0x5A, 0xE7, 0xDA, 0xAF, 0x4E, 0x68, 0x1E, 0x9B,
    0x2C, 0xD6, 0xA6, 0xB6, 0x5E, 0x3A, 0x79, 0xC9, 0x40, 0x7B, 0x0A, 0x6B, 0xE9, 0xE3, 0x43, 0x15,
    0x6C, 0xC4, 0xB7, 0xCE, 0xD0, 0xE5, 0xD1, 0x80, 0x9C, 0x41, 0xAB, 0x37, 0x53, 0xD1, 0x85, 0x07,
    0xB4, 0x2D, 0xEF, 0x0A, 0xC5, 0xEC, 0x2B, 0x67, 0x23, 0xBE, 0x0D, 0xAD, 0x56, 0x7A, 0xF4, 0xA4,
    0xD3, 0xFA, 0xCE, 0x67, 0x59, 0x1A, 0xE5, 0xBA, 0xE3, 0xB6, 0xB9, 0x09, 0x3F, 0x93, 0x20, 0x01,
    0x90, 0x80, 0x86, 0x1E, 0xB8, 0xD8, 0xBD, 0xF5, 0x70, 0x49, 0xA5, 0xDD, 0xE1, 0x18, 0xD9, 0x00,
    0x2E, 0xA4, 0xEC, 0x33, 0x75, 0x2C, 0x3B, 0x57, 0xEF, 0x9B, 0xE8, 0x69, 0x9F, 0x8D, 0x29, 0xE6,
    0xB0, 0x61, 0xCD, 0x5D, 0x6C, 0x76, 0x87, 0x73, 0x53, 0xDA, 0xB1, 0x4A, 0x65, 0xEC, 0x8F, 0xDD,
    0x00, 0xE6, 0x54, 0x94, 0x00, 0x47, 0x24, 0xFC, 0xCB, 0x32, 0xE3, 0xE1, 0x5F, 0x2B, 0xB4, 0xFC,
    0xA0, 0xA9, 0xAE, 0x4C, 0x84, 0x24, 0x9D, 0x16, 0x54, 0xAC, 0xF1, 0x25, 0xE7, 0xA7, 0xB3, 0xD7,
    0x03, 0x63, 0xB2, 0x8D, 0x7C, 0x60, 0x59, 0x04, 0x76, 0xA9, 0x8C, 0x2C, 0x23, 0xE8, 0x8F, 0x0B,
    0xD7, 0xEA, 0x8D, 0x08, 0x8E, 0x66, 0x2C, 0x38, 0xDF, 0x40, 0x49, 0x39, 0x1A, 0x5A, 0x9E, 0x52,
    0xC6, 0x14, 0x73, 0xD8, 0xB0, 0x06, 0x51, 0x57, 0xE9, 0x0C, 0xC1, 0x71, 0x07, 0xAB, 0x85, 0x80,
    0x25, 0x13, 0x50, 0xEB, 0x2D, 0x94, 0xAE, 0x6E, 0xA6, 0x33, 0x75, 0x9D, 0x04, 0x22, 0xE8, 0x8F,
    0xE8, 0xFD, 0xC5, 0x9A, 0x27, 0x9D, 0xDD, 0x83, 0x28, 0x02, 0xD2, 0xD2, 0x6E, 0xB6, 0xAE, 0xE4,
    0xD5, 0x39, 0xB7, 0xAC, 0x9E, 0x6E, 0x37, 0x75, 0x51, 0xF1, 0x9F, 0xFA, 0xE1, 0xD4, 0x4B, 0x26,
    0x50, 0xFB, 0xD0, 0xCA, 0x80, 0x91, 0x01, 0xCC, 0x3F, 0x2F, 0x79, 0x30, 0x6A, 0x7F, 0x08, 0xD5,
    0x19, 0xA0, 0xC1, 0x89, 0xA7, 0x58, 0x76, 0x20, 0x18, 0x65, 0xF5, 0x00, 0x00, 0x39, 0x02, 0xC8,
    0xC4, 0x3D, 0x53, 0x1F, 0x23, 0xE0, 0xDE, 0x1F, 0x99, 0x05, 0x67, 0xB5, 0xEE, 0x75, 0xDE, 0x99,
    0x5F, 0x43, 0x50, 0x0E, 0x10, 0x04, 0xE2, 0xD3, 0xD5, 0xF2, 0x08, 0xF0, 0xC1, 0x40, 0x04, 0x32,
    0x82, 0xC0, 0x10, 0x19, 0xA1, 0x3A, 0x23, 0xF5, 0x95, 0x77, 0xDA, 0x18, 0x20, 0x80, 0x51, 0x06,
    0x77, 0x3F, 0x69, 0xB7, 0x60, 0x08, 0x04, 0xFD, 0x60, 0x75, 0x3D, 0xC1, 0x52, 0x09, 0x20, 0xF5,
    0x91, 0xC9, 0xBF, 0x31, 0x50, 0x90, 0x71, 0x3F, 0xFD, 0x98, 0xEF, 0x00, 0x1F, 0x08, 0xA5, 0x40,
    0xFA, 0xA3, 0x0B, 0xEA, 0x24, 0x13, 0xE0, 0x9F, 0x16, 0x04, 0x24, 0x5D, 0xC3, 0xC5, 0xE9, 0x15,
    0x16, 0xA1, 0x13, 0x7E, 0x77, 0xB9, 0x45, 0x10, 0x98, 0xF3, 0x15, 0xBB, 0x6A, 0x68, 0x3C, 0x2E,
    0x13, 0x63, 0x96, 0x60, 0xDA, 0x9C, 0x79, 0x41, 0x6F, 0xA7, 0x96, 0x1A, 0xDC, 0x49, 0xAC, 0xF8,
    0x41, 0x37, 0x6E, 0x02, 0xCB, 0x36, 0x66, 0x7B, 0x9C, 0x5E, 0x19, 0x97, 0xFF, 0x4C, 0x11, 0x18,
    0x1E, 0x2D, 0xF8, 0x5F, 0xC1, 0xDB, 0x67, 0x96, 0xDF, 0xC2, 0xCD, 0x47, 0x35, 0x1C, 0x09, 0x34,
    0x1F, 0x6A, 0x2F, 0x46, 0x42, 0x2C, 0x03, 0xB8, 0x09, 0xFC, 0xEB, 0xE7, 0x1F, 0x9D, 0xF3, 0x68,
    0x8A, 0xEF, 0x5B, 0xA1, 0xA2, 0x7F, 0x54, 0x26, 0x7B, 0x4F, 0x55, 0xCC, 0x5B, 0xBF, 0xAF, 0x88,
    0x23, 0x81, 0x87, 0x68, 0xB4, 0xFA, 0xC3, 0x47, 0x8C, 0x00, 0x7E, 0x27, 0x38, 0x02, 0xB3, 0x57,
    0xED, 0xD5, 0x78, 0xBD, 0xE6, 0x1B, 0x20, 0xF9, 0x5F, 0xD2, 0xDC, 0x77, 0x3F, 0x4D, 0x15, 0xEA,
    0x09, 0x77, 0x9B, 0x18, 0x01, 0x6E, 0x6D, 0x56, 0x64, 0x52, 0xD1, 0x64, 0xAF, 0x29, 0x0A, 0xC9,
    0xE0, 0x9C, 0xA3, 0x6F, 0xD8, 0x7B, 0xF1, 0xA1, 0x19, 0x55, 0xFD, 0x62, 0x44, 0x44, 0x09, 0xC4,
    0x17, 0x39, 0x7D, 0x82, 0x57, 0xEF, 0x90, 0x0D, 0xCC, 0xDF, 0xE0, 0x33, 0x3F, 0x24, 0x2A, 0x64,
    0x7F, 0x79, 0xFB, 0x68, 0x24, 0x46, 0x23, 0xC0, 0x9A, 0x2D, 0x20, 0x74, 0xF5, 0x84, 0xC0, 0xB9,
    0xCD, 0x8A, 0x37, 0x02, 0xE6, 0x07, 0xEF, 0xF8, 0xE5, 0x96, 0xD4, 0x87, 0xC8, 0x7F, 0x4D, 0xA6,
    0x61, 0xCC, 0x66, 0x93, 0xCB, 0xCC, 0x6B, 0xEA, 0xB4, 0xE9, 0x0B, 0x3E, 0xC9, 0x28, 0x19, 0xAB,
    0x07, 0x58, 0xB3, 0x29, 0x66, 0xF8, 0xC9, 0x8D, 0x2F, 0xD9, 0x3F, 0xF0, 0x83, 0xAD, 0x19, 0x7C,
    0x12, 0xFC, 0x12, 0xBC, 0x1E, 0xB1, 0x29, 0x7F, 0x5C, 0xCD, 0x26, 0x19, 0x7D, 0xC8, 0xD1, 0x2F,
    0xF2, 0xC3, 0xC4, 0xB0, 0xAF, 0xAB, 0x6D, 0xC3, 0xD7, 0xD0, 0xD5, 0x6C, 0xD3, 0x83, 0xDE, 0x4F,
    0x96, 0x1B, 0x67, 0x42, 0xFE, 0x33, 0x17, 0x2E, 0x5D, 0x89, 0xE7, 0x5B, 0x19, 0x7B, 0xB4, 0xE7,
    0xA5, 0x35, 0x9B, 0x5C, 0x46, 0x78, 0xBE, 0xBD, 0x67, 0xBE, 0x19, 0x24, 0x77, 0xDF, 0xFF, 0xCA,
    0xFF, 0x5F, 0x2F, 0xAC, 0x33, 0x0E, 0x47, 0xF2, 0x08, 0xCB, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45,
    0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82 };
    DEFINE_STATIC_LOCAL(RefPtr<SharedBuffer>, defaultMissingPluginBuffer, (SharedBuffer::create(defaultMissingPluginData, sizeof(defaultMissingPluginData))));
    RefPtr<Image> image = BitmapImage::create();
    image->setData(defaultMissingPluginBuffer, true);
    return image.release();
}

RenderEmbeddedObject::RenderEmbeddedObject(Element* element)
    : RenderPart(element)
    , m_hasFallbackContent(false)
    , m_showsUnavailablePluginIndicator(false)
{
    view()->frameView()->setIsVisuallyNonEmpty();
}

RenderEmbeddedObject::~RenderEmbeddedObject()
{
}

LayerType RenderEmbeddedObject::layerTypeRequired() const
{
    LayerType type = RenderPart::layerTypeRequired();
    if (type != NoLayer)
        return type;

    return allowsAcceleratedCompositing() ? NormalLayer : NoLayer;
}

bool RenderEmbeddedObject::allowsAcceleratedCompositing() const
{
    return widget() && widget()->isPluginView() && toPluginView(widget())->platformLayer();
}

static String unavailablePluginReplacementText(Node* node, RenderEmbeddedObject::PluginUnavailabilityReason pluginUnavailabilityReason)
{
    Locale& locale = node ? toElement(node)->locale() : Locale::defaultLocale();
    switch (pluginUnavailabilityReason) {
    case RenderEmbeddedObject::PluginMissing:
        return locale.queryString(blink::WebLocalizedString::MissingPluginText);
    case RenderEmbeddedObject::PluginBlockedByContentSecurityPolicy:
        return locale.queryString(blink::WebLocalizedString::BlockedPluginText);
    }

    ASSERT_NOT_REACHED();
    return String();
}

void RenderEmbeddedObject::setPluginUnavailabilityReason(PluginUnavailabilityReason pluginUnavailabilityReason)
{
    ASSERT(!m_showsUnavailablePluginIndicator);
    m_showsUnavailablePluginIndicator = true;
    m_pluginUnavailabilityReason = pluginUnavailabilityReason;

    m_unavailablePluginReplacementText = unavailablePluginReplacementText(node(), pluginUnavailabilityReason);
}

bool RenderEmbeddedObject::showsUnavailablePluginIndicator() const
{
    return m_showsUnavailablePluginIndicator;
}

void RenderEmbeddedObject::paintContents(PaintInfo& paintInfo, const LayoutPoint& paintOffset)
{
    Element* element = toElement(node());
    if (!element || !element->isPluginElement())
        return;

    RenderPart::paintContents(paintInfo, paintOffset);
}

void RenderEmbeddedObject::paint(PaintInfo& paintInfo, const LayoutPoint& paintOffset)
{
    if (showsUnavailablePluginIndicator()) {
        RenderReplaced::paint(paintInfo, paintOffset);
        return;
    }

    RenderPart::paint(paintInfo, paintOffset);
}

// The original function was called to display text indicating missing plugin.
// The new function overrides this with a missing plugin image.
void RenderEmbeddedObject::paintReplaced(PaintInfo& paintInfo, const LayoutPoint& paintOffset)
{
    if (!showsUnavailablePluginIndicator())
        return;

    if (paintInfo.phase == PaintPhaseSelection)
        return;

    GraphicsContext* context = paintInfo.context;
    if (context->paintingDisabled())
        return;

    FloatRect contentRect = contentBoxRect();
    contentRect.moveBy(roundedIntPoint(paintOffset));

    GraphicsContextStateSaver stateSaver(*context);
    context->clip(contentRect);

    RefPtr<Image> missingPlugin = missingPluginImage();
    IntSize imageSize(missingPlugin->size());
    int xOffset = (contentRect.width() - imageSize.width()) / 2;
    int yOffset = (contentRect.height() - imageSize.height()) / 2;
    LayoutSize imageOffset(xOffset, yOffset);

    context->drawImage(missingPlugin.get(), pixelSnappedIntRect(LayoutRect(paintOffset + imageOffset, imageSize)), CompositeSourceOver, shouldRespectImageOrientation());
}

bool RenderEmbeddedObject::getReplacementTextGeometry(const LayoutPoint& accumulatedOffset, FloatRect& contentRect, Path& path, FloatRect& replacementTextRect, Font& font, TextRun& run, float& textWidth) const
{
    contentRect = contentBoxRect();
    contentRect.moveBy(roundedIntPoint(accumulatedOffset));

    FontDescription fontDescription;
    RenderTheme::theme().systemFont(CSSValueWebkitSmallControl, fontDescription);
    fontDescription.setWeight(FontWeightBold);
    Settings* settings = document().settings();
    ASSERT(settings);
    if (!settings)
        return false;
    fontDescription.setComputedSize(fontDescription.specifiedSize());
    font = Font(fontDescription);
    font.update(0);

    run = TextRun(m_unavailablePluginReplacementText);
    textWidth = font.width(run);

    replacementTextRect.setSize(FloatSize(textWidth + replacementTextRoundedRectLeftRightTextMargin * 2, replacementTextRoundedRectHeight));
    float x = (contentRect.size().width() / 2 - replacementTextRect.size().width() / 2) + contentRect.location().x();
    float y = (contentRect.size().height() / 2 - replacementTextRect.size().height() / 2) + contentRect.location().y();
    replacementTextRect.setLocation(FloatPoint(x, y));

    path.addRoundedRect(replacementTextRect, FloatSize(replacementTextRoundedRectRadius, replacementTextRoundedRectRadius));

    return true;
}

void RenderEmbeddedObject::layout()
{
    ASSERT(needsLayout());

    LayoutSize oldSize = contentBoxRect().size();
    LayoutRectRecorder recorder(*this);

    updateLogicalWidth();
    updateLogicalHeight();

    RenderPart::layout();

    m_overflow.clear();
    addVisualEffectOverflow();

    updateLayerTransform();

    if (!widget() && frameView())
        frameView()->addWidgetToUpdate(*this);

    clearNeedsLayout();

    if (!canHaveChildren())
        return;

    // This code copied from RenderMedia::layout().
    RenderObject* child = m_children.firstChild();

    if (!child)
        return;

    RenderBox* childBox = toRenderBox(child);

    if (!childBox)
        return;

    LayoutSize newSize = contentBoxRect().size();
    if (newSize == oldSize && !childBox->needsLayout())
        return;

    // When calling layout() on a child node, a parent must either push a LayoutStateMaintainter, or
    // instantiate LayoutStateDisabler. Since using a LayoutStateMaintainer is slightly more efficient,
    // and this method will be called many times per second during playback, use a LayoutStateMaintainer:
    LayoutStateMaintainer statePusher(view(), this, locationOffset(), hasTransform() || hasReflection() || style()->isFlippedBlocksWritingMode());

    childBox->setLocation(LayoutPoint(borderLeft(), borderTop()) + LayoutSize(paddingLeft(), paddingTop()));
    childBox->style()->setHeight(Length(newSize.height(), Fixed));
    childBox->style()->setWidth(Length(newSize.width(), Fixed));
    childBox->forceLayout();
    clearNeedsLayout();

    statePusher.pop();
}

bool RenderEmbeddedObject::scroll(ScrollDirection direction, ScrollGranularity granularity, float)
{
    return false;
}

bool RenderEmbeddedObject::canHaveChildren() const
{
    return false;
}

PassRefPtr<Image> RenderEmbeddedObject::missingPluginImage()
{
    DEFINE_STATIC_REF(WebCore::Image, missingPluginImage, (loadDefaultMissingPlugin()));
    return missingPluginImage;
}

}
