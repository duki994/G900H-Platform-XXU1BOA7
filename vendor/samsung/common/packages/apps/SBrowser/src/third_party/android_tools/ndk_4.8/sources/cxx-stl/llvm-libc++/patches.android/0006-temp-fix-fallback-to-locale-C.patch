From 19540b96f7f14a32570b70b493d7a3ef2ff2102d Mon Sep 17 00:00:00 2001
From: Andrew Hsieh <andrewhsieh@google.com>
Date: Fri, 4 Oct 2013 16:02:18 +0800
Subject: [PATCH 6/7] temp fix: fallback to locale("C")

Android's newlocale() return null for anything other than "", "C",
and "POSIX", fallback to "C" to allow more tests to run and uncover
other issues.
---
 src/locale.cpp | 124 ++++++++++++++++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 118 insertions(+), 6 deletions(-)

diff --git a/src/locale.cpp b/src/locale.cpp
index f5650f2..19e704b 100644
--- a/src/locale.cpp
+++ b/src/locale.cpp
@@ -48,6 +48,10 @@ locale_t __cloc() {
 }
 #endif // __cloc_defined
 
+inline locale_t __new_cloc() {
+  return newlocale(LC_ALL_MASK, "C", 0);
+}
+
 namespace {
 
 struct release
@@ -635,8 +639,14 @@ collate_byname<char>::collate_byname(const char* n, size_t refs)
 {
 #ifndef _LIBCPP_NO_EXCEPTIONS
     if (__l == 0)
+    {
+#if !defined(__ANDROID__)
         throw runtime_error("collate_byname<char>::collate_byname"
                             " failed to construct for " + string(n));
+#else
+        __l = __new_cloc();
+#endif
+    }
 #endif  // _LIBCPP_NO_EXCEPTIONS
 }
 
@@ -646,8 +656,14 @@ collate_byname<char>::collate_byname(const string& name, size_t refs)
 {
 #ifndef _LIBCPP_NO_EXCEPTIONS
     if (__l == 0)
+    {
+#if !defined(__ANDROID__)
         throw runtime_error("collate_byname<char>::collate_byname"
                             " failed to construct for " + name);
+#else
+        __l = __new_cloc();
+#endif
+    }
 #endif  // _LIBCPP_NO_EXCEPTIONS
 }
 
@@ -687,8 +703,14 @@ collate_byname<wchar_t>::collate_byname(const char* n, size_t refs)
 {
 #ifndef _LIBCPP_NO_EXCEPTIONS
     if (__l == 0)
+    {
+#if !defined(__ANDROID__)
         throw runtime_error("collate_byname<wchar_t>::collate_byname(size_t refs)"
                             " failed to construct for " + string(n));
+#else
+        __l = __new_cloc();
+#endif
+    }
 #endif  // _LIBCPP_NO_EXCEPTIONS
 }
 
@@ -698,8 +720,14 @@ collate_byname<wchar_t>::collate_byname(const string& name, size_t refs)
 {
 #ifndef _LIBCPP_NO_EXCEPTIONS
     if (__l == 0)
+    {
+#if !defined(__ANDROID__)
         throw runtime_error("collate_byname<wchar_t>::collate_byname(size_t refs)"
                             " failed to construct for " + name);
+#else
+        __l = __new_cloc();
+#endif
+    }
 #endif  // _LIBCPP_NO_EXCEPTIONS
 }
 
@@ -1092,8 +1120,14 @@ ctype_byname<char>::ctype_byname(const char* name, size_t refs)
 {
 #ifndef _LIBCPP_NO_EXCEPTIONS
     if (__l == 0)
+    {
+#if !defined(__ANDROID__)
         throw runtime_error("ctype_byname<char>::ctype_byname"
                             " failed to construct for " + string(name));
+#else
+        __l = __new_cloc();
+#endif
+    }
 #endif  // _LIBCPP_NO_EXCEPTIONS
 }
 
@@ -1103,8 +1137,14 @@ ctype_byname<char>::ctype_byname(const string& name, size_t refs)
 {
 #ifndef _LIBCPP_NO_EXCEPTIONS
     if (__l == 0)
+    {
+#if !defined(__ANDROID__)
         throw runtime_error("ctype_byname<char>::ctype_byname"
                             " failed to construct for " + name);
+#else
+        __l = __new_cloc();
+#endif
+    }
 #endif  // _LIBCPP_NO_EXCEPTIONS
 }
 
@@ -1149,8 +1189,14 @@ ctype_byname<wchar_t>::ctype_byname(const char* name, size_t refs)
 {
 #ifndef _LIBCPP_NO_EXCEPTIONS
     if (__l == 0)
+    {
+#if !defined(__ANDROID__)
         throw runtime_error("ctype_byname<wchar_t>::ctype_byname"
                             " failed to construct for " + string(name));
+#else
+        __l = __new_cloc();
+#endif
+    }
 #endif  // _LIBCPP_NO_EXCEPTIONS
 }
 
@@ -1160,8 +1206,14 @@ ctype_byname<wchar_t>::ctype_byname(const string& name, size_t refs)
 {
 #ifndef _LIBCPP_NO_EXCEPTIONS
     if (__l == 0)
+    {
+#if !defined(__ANDROID__)
         throw runtime_error("ctype_byname<wchar_t>::ctype_byname"
                             " failed to construct for " + name);
+#else
+        __l = __new_cloc();
+#endif
+    }
 #endif  // _LIBCPP_NO_EXCEPTIONS
 }
 
@@ -1430,8 +1482,14 @@ codecvt<wchar_t, char, mbstate_t>::codecvt(const char* nm, size_t refs)
 {
 #ifndef _LIBCPP_NO_EXCEPTIONS
     if (__l == 0)
+    {
+#if !defined(__ANDROID__)
         throw runtime_error("codecvt_byname<wchar_t, char, mbstate_t>::codecvt_byname"
                             " failed to construct for " + string(nm));
+#else
+        __l = __new_cloc();
+#endif
+    }
 #endif  // _LIBCPP_NO_EXCEPTIONS
 }
 
@@ -4225,7 +4283,12 @@ numpunct_byname<char>::__init(const char* nm)
 {
     if (strcmp(nm, "C") != 0)
     {
-        __locale_unique_ptr loc(newlocale(LC_ALL_MASK, nm, 0), freelocale);
+        locale_t l = newlocale(LC_ALL_MASK, nm, 0);
+#if defined(__ANDROID__)
+        if (l == 0)
+            l = __new_cloc();
+#endif
+        __locale_unique_ptr loc(l, freelocale);
 #ifndef _LIBCPP_NO_EXCEPTIONS
         if (loc == nullptr)
             throw runtime_error("numpunct_byname<char>::numpunct_byname"
@@ -4268,7 +4331,12 @@ numpunct_byname<wchar_t>::__init(const char* nm)
 {
     if (strcmp(nm, "C") != 0)
     {
-        __locale_unique_ptr loc(newlocale(LC_ALL_MASK, nm, 0), freelocale);
+        locale_t l = newlocale(LC_ALL_MASK, nm, 0);
+#if defined(__ANDROID__)
+        if (l == 0)
+            l = __new_cloc();
+#endif
+        __locale_unique_ptr loc(l, freelocale);
 #ifndef _LIBCPP_NO_EXCEPTIONS
         if (loc == nullptr)
             throw runtime_error("numpunct_byname<char>::numpunct_byname"
@@ -4682,8 +4750,14 @@ __time_get::__time_get(const char* nm)
 {
 #ifndef _LIBCPP_NO_EXCEPTIONS
     if (__loc_ == 0)
+    {
+#if !defined(__ANDROID__)
         throw runtime_error("time_get_byname"
                             " failed to construct for " + string(nm));
+#else
+        __loc_ = __new_cloc();
+#endif
+    }
 #endif  // _LIBCPP_NO_EXCEPTIONS
 }
 
@@ -4692,8 +4766,14 @@ __time_get::__time_get(const string& nm)
 {
 #ifndef _LIBCPP_NO_EXCEPTIONS
     if (__loc_ == 0)
+    {
+# if !defined(__ANDROID__)
         throw runtime_error("time_get_byname"
                             " failed to construct for " + nm);
+#else
+        __loc_ = __new_cloc();
+#endif
+    }
 #endif  // _LIBCPP_NO_EXCEPTIONS
 }
 
@@ -5365,8 +5445,14 @@ __time_put::__time_put(const char* nm)
 {
 #ifndef _LIBCPP_NO_EXCEPTIONS
     if (__loc_ == 0)
+    {
+# if !defined(__ANDROID__)
         throw runtime_error("time_put_byname"
                             " failed to construct for " + string(nm));
+#else
+        __loc_ = __new_cloc();
+#endif
+    }
 #endif  // _LIBCPP_NO_EXCEPTIONS
 }
 
@@ -5375,8 +5461,14 @@ __time_put::__time_put(const string& nm)
 {
 #ifndef _LIBCPP_NO_EXCEPTIONS
     if (__loc_ == 0)
+    {
+# if !defined(__ANDROID__)
         throw runtime_error("time_put_byname"
                             " failed to construct for " + nm);
+#else
+        __loc_ = __new_cloc();
+#endif
+    }
 #endif  // _LIBCPP_NO_EXCEPTIONS
 }
 
@@ -5795,7 +5887,12 @@ void
 moneypunct_byname<char, false>::init(const char* nm)
 {
     typedef moneypunct<char, false> base;
-    __locale_unique_ptr loc(newlocale(LC_ALL_MASK, nm, 0), freelocale);
+    locale_t l = newlocale(LC_ALL_MASK, nm, 0);
+#if defined(__ANDROID__)
+    if (l == 0)
+        l = __new_cloc();
+#endif
+    __locale_unique_ptr loc(l, freelocale);
 #ifndef _LIBCPP_NO_EXCEPTIONS
     if (loc == nullptr)
         throw runtime_error("moneypunct_byname"
@@ -5843,7 +5940,12 @@ void
 moneypunct_byname<char, true>::init(const char* nm)
 {
     typedef moneypunct<char, true> base;
-    __locale_unique_ptr loc(newlocale(LC_ALL_MASK, nm, 0), freelocale);
+    locale_t l = newlocale(LC_ALL_MASK, nm, 0);
+#if defined(__ANDROID__)
+    if (l == 0)
+        l = __new_cloc();
+#endif
+    __locale_unique_ptr loc(l, freelocale);
 #ifndef _LIBCPP_NO_EXCEPTIONS
     if (loc == nullptr)
         throw runtime_error("moneypunct_byname"
@@ -5908,7 +6010,12 @@ void
 moneypunct_byname<wchar_t, false>::init(const char* nm)
 {
     typedef moneypunct<wchar_t, false> base;
-    __locale_unique_ptr loc(newlocale(LC_ALL_MASK, nm, 0), freelocale);
+    locale_t l = newlocale(LC_ALL_MASK, nm, 0);
+#if defined(__ANDROID__)
+    if (l == 0)
+        l = __new_cloc();
+#endif
+    __locale_unique_ptr loc(l, freelocale);
 #ifndef _LIBCPP_NO_EXCEPTIONS
     if (loc == nullptr)
         throw runtime_error("moneypunct_byname"
@@ -5991,7 +6098,12 @@ void
 moneypunct_byname<wchar_t, true>::init(const char* nm)
 {
     typedef moneypunct<wchar_t, true> base;
-    __locale_unique_ptr loc(newlocale(LC_ALL_MASK, nm, 0), freelocale);
+    locale_t l = newlocale(LC_ALL_MASK, nm, 0);
+#if defined(__ANDROID__)
+    if (l == 0)
+        l = __new_cloc();
+#endif
+    __locale_unique_ptr loc(l, freelocale);
 #ifndef _LIBCPP_NO_EXCEPTIONS
     if (loc == nullptr)
         throw runtime_error("moneypunct_byname"
-- 
1.8.4

